
Lab 9 - Piazo Song john.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000200  080037e8  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080037e8  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b703  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d25  00000000  00000000  0002b933  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002d658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002e120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d18  00000000  00000000  0002eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cfb  00000000  00000000  00051808  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf2fa  00000000  00000000  0005a503  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001297fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  00129878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000200 	.word	0x20000200
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800354c 	.word	0x0800354c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000204 	.word	0x20000204
 8000200:	0800354c 	.word	0x0800354c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f92b 	bl	8000788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 f85c 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f943 	bl	80007f2 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f90b 	bl	800079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000198 	.word	0x20000198
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000228 	.word	0x20000228

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000228 	.word	0x20000228

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4907      	ldr	r1, [pc, #28]	; (8000684 <__NVIC_EnableIRQ+0x38>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000e100 	.word	0xe000e100

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	490c      	ldr	r1, [pc, #48]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4908      	ldr	r1, [pc, #32]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	3b04      	subs	r3, #4
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 32ff 	mov.w	r2, #4294967295
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	401a      	ands	r2, r3
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000724:	f04f 31ff 	mov.w	r1, #4294967295
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	43d9      	mvns	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	4313      	orrs	r3, r2
         );
}
 8000736:	4618      	mov	r0, r3
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	210f      	movs	r1, #15
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f7ff ff8e 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff29 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079e:	b580      	push	{r7, lr}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	60b9      	str	r1, [r7, #8]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff3e 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff8e 	bl	80006dc <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5d 	bl	8000688 <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff31 	bl	800064c <__NVIC_EnableIRQ>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffa2 	bl	8000744 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	e165      	b.n	8000af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	429a      	cmp	r2, r3
 8000842:	f040 8154 	bne.w	8000aee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0xfc>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d123      	bne.n	8000950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	69b9      	ldr	r1, [r7, #24]
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0203 	and.w	r2, r3, #3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80ae 	beq.w	8000aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b5c      	ldr	r3, [pc, #368]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a5b      	ldr	r2, [pc, #364]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ae:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <HAL_GPIO_Init+0x300>)
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4013      	ands	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4e      	ldr	r2, [pc, #312]	; (8000b10 <HAL_GPIO_Init+0x304>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d025      	beq.n	8000a26 <HAL_GPIO_Init+0x21a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <HAL_GPIO_Init+0x308>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d01f      	beq.n	8000a22 <HAL_GPIO_Init+0x216>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <HAL_GPIO_Init+0x30c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d019      	beq.n	8000a1e <HAL_GPIO_Init+0x212>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4b      	ldr	r2, [pc, #300]	; (8000b1c <HAL_GPIO_Init+0x310>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x20e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <HAL_GPIO_Init+0x314>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x20a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <HAL_GPIO_Init+0x318>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x206>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a48      	ldr	r2, [pc, #288]	; (8000b28 <HAL_GPIO_Init+0x31c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x202>
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	e00c      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e00a      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e008      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x21c>
 8000a26:	2300      	movs	r3, #0
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 0203 	and.w	r2, r2, #3
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a38:	4934      	ldr	r1, [pc, #208]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6a:	4a30      	ldr	r2, [pc, #192]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_GPIO_Init+0x320>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	f67f ae96 	bls.w	8000828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	; 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40013c00 	.word	0x40013c00

08000b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e0cc      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b44:	4b68      	ldr	r3, [pc, #416]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d90c      	bls.n	8000b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b52:	4b65      	ldr	r3, [pc, #404]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b5a:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d001      	beq.n	8000b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e0b8      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d020      	beq.n	8000bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b84:	4b59      	ldr	r3, [pc, #356]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4a58      	ldr	r2, [pc, #352]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b9c:	4b53      	ldr	r3, [pc, #332]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4a52      	ldr	r2, [pc, #328]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	494d      	ldr	r1, [pc, #308]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d044      	beq.n	8000c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d107      	bne.n	8000bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d119      	bne.n	8000c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e07f      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d003      	beq.n	8000bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d107      	bne.n	8000bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bee:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d109      	bne.n	8000c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e06f      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e067      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c0e:	4b37      	ldr	r3, [pc, #220]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f023 0203 	bic.w	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4934      	ldr	r1, [pc, #208]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c20:	f7ff fcd6 	bl	80005d0 <HAL_GetTick>
 8000c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c26:	e00a      	b.n	8000c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c28:	f7ff fcd2 	bl	80005d0 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e04f      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 020c 	and.w	r2, r3, #12
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d1eb      	bne.n	8000c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d20c      	bcs.n	8000c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d001      	beq.n	8000c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e032      	b.n	8000cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d008      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4916      	ldr	r1, [pc, #88]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d009      	beq.n	8000cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	490e      	ldr	r1, [pc, #56]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cb6:	f000 f821 	bl	8000cfc <HAL_RCC_GetSysClockFreq>
 8000cba:	4601      	mov	r1, r0
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_RCC_ClockConfig+0x1bc>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc36 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	08003564 	.word	0x08003564
 8000cf4:	20000198 	.word	0x20000198
 8000cf8:	20000000 	.word	0x20000000

08000cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d16:	4b9f      	ldr	r3, [pc, #636]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b0c      	cmp	r3, #12
 8000d20:	f200 8130 	bhi.w	8000f84 <HAL_RCC_GetSysClockFreq+0x288>
 8000d24:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <HAL_RCC_GetSysClockFreq+0x30>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000f85 	.word	0x08000f85
 8000d34:	08000f85 	.word	0x08000f85
 8000d38:	08000f85 	.word	0x08000f85
 8000d3c:	08000d67 	.word	0x08000d67
 8000d40:	08000f85 	.word	0x08000f85
 8000d44:	08000f85 	.word	0x08000f85
 8000d48:	08000f85 	.word	0x08000f85
 8000d4c:	08000d6d 	.word	0x08000d6d
 8000d50:	08000f85 	.word	0x08000f85
 8000d54:	08000f85 	.word	0x08000f85
 8000d58:	08000f85 	.word	0x08000f85
 8000d5c:	08000e7b 	.word	0x08000e7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d60:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000d62:	613b      	str	r3, [r7, #16]
       break;
 8000d64:	e111      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000d66:	4b8d      	ldr	r3, [pc, #564]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000d68:	613b      	str	r3, [r7, #16]
      break;
 8000d6a:	e10e      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d6c:	4b89      	ldr	r3, [pc, #548]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d74:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d76:	4b87      	ldr	r3, [pc, #540]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d023      	beq.n	8000dca <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d82:	4b84      	ldr	r3, [pc, #528]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	099b      	lsrs	r3, r3, #6
 8000d88:	f04f 0400 	mov.w	r4, #0
 8000d8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	ea03 0501 	and.w	r5, r3, r1
 8000d98:	ea04 0602 	and.w	r6, r4, r2
 8000d9c:	4a7f      	ldr	r2, [pc, #508]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000d9e:	fb02 f106 	mul.w	r1, r2, r6
 8000da2:	2200      	movs	r2, #0
 8000da4:	fb02 f205 	mul.w	r2, r2, r5
 8000da8:	440a      	add	r2, r1
 8000daa:	497c      	ldr	r1, [pc, #496]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000dac:	fba5 0101 	umull	r0, r1, r5, r1
 8000db0:	1853      	adds	r3, r2, r1
 8000db2:	4619      	mov	r1, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f04f 0400 	mov.w	r4, #0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	f7ff fa21 	bl	8000204 <__aeabi_uldivmod>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e049      	b.n	8000e5e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000dca:	4b72      	ldr	r3, [pc, #456]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	f04f 0400 	mov.w	r4, #0
 8000dd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	ea03 0501 	and.w	r5, r3, r1
 8000de0:	ea04 0602 	and.w	r6, r4, r2
 8000de4:	4629      	mov	r1, r5
 8000de6:	4632      	mov	r2, r6
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	f04f 0400 	mov.w	r4, #0
 8000df0:	0154      	lsls	r4, r2, #5
 8000df2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000df6:	014b      	lsls	r3, r1, #5
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	1b49      	subs	r1, r1, r5
 8000dfe:	eb62 0206 	sbc.w	r2, r2, r6
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	f04f 0400 	mov.w	r4, #0
 8000e0a:	0194      	lsls	r4, r2, #6
 8000e0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000e10:	018b      	lsls	r3, r1, #6
 8000e12:	1a5b      	subs	r3, r3, r1
 8000e14:	eb64 0402 	sbc.w	r4, r4, r2
 8000e18:	f04f 0100 	mov.w	r1, #0
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	00e2      	lsls	r2, r4, #3
 8000e22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000e26:	00d9      	lsls	r1, r3, #3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4614      	mov	r4, r2
 8000e2c:	195b      	adds	r3, r3, r5
 8000e2e:	eb44 0406 	adc.w	r4, r4, r6
 8000e32:	f04f 0100 	mov.w	r1, #0
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	02a2      	lsls	r2, r4, #10
 8000e3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000e40:	0299      	lsls	r1, r3, #10
 8000e42:	460b      	mov	r3, r1
 8000e44:	4614      	mov	r4, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	4621      	mov	r1, r4
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f04f 0400 	mov.w	r4, #0
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	f7ff f9d6 	bl	8000204 <__aeabi_uldivmod>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e5e:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	613b      	str	r3, [r7, #16]
      break;
 8000e78:	e087      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e7a:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e82:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e84:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e90:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	099b      	lsrs	r3, r3, #6
 8000e96:	f04f 0400 	mov.w	r4, #0
 8000e9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	ea03 0501 	and.w	r5, r3, r1
 8000ea6:	ea04 0602 	and.w	r6, r4, r2
 8000eaa:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000eac:	fb02 f106 	mul.w	r1, r2, r6
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	fb02 f205 	mul.w	r2, r2, r5
 8000eb6:	440a      	add	r2, r1
 8000eb8:	4938      	ldr	r1, [pc, #224]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000eba:	fba5 0101 	umull	r0, r1, r5, r1
 8000ebe:	1853      	adds	r3, r2, r1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f04f 0400 	mov.w	r4, #0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	f7ff f99a 	bl	8000204 <__aeabi_uldivmod>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e049      	b.n	8000f6c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	f04f 0400 	mov.w	r4, #0
 8000ee2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	ea03 0501 	and.w	r5, r3, r1
 8000eee:	ea04 0602 	and.w	r6, r4, r2
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	f04f 0400 	mov.w	r4, #0
 8000efe:	0154      	lsls	r4, r2, #5
 8000f00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f04:	014b      	lsls	r3, r1, #5
 8000f06:	4619      	mov	r1, r3
 8000f08:	4622      	mov	r2, r4
 8000f0a:	1b49      	subs	r1, r1, r5
 8000f0c:	eb62 0206 	sbc.w	r2, r2, r6
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f04f 0400 	mov.w	r4, #0
 8000f18:	0194      	lsls	r4, r2, #6
 8000f1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f1e:	018b      	lsls	r3, r1, #6
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	eb64 0402 	sbc.w	r4, r4, r2
 8000f26:	f04f 0100 	mov.w	r1, #0
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	00e2      	lsls	r2, r4, #3
 8000f30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f34:	00d9      	lsls	r1, r3, #3
 8000f36:	460b      	mov	r3, r1
 8000f38:	4614      	mov	r4, r2
 8000f3a:	195b      	adds	r3, r3, r5
 8000f3c:	eb44 0406 	adc.w	r4, r4, r6
 8000f40:	f04f 0100 	mov.w	r1, #0
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	02a2      	lsls	r2, r4, #10
 8000f4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f4e:	0299      	lsls	r1, r3, #10
 8000f50:	460b      	mov	r3, r1
 8000f52:	4614      	mov	r4, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	4621      	mov	r1, r4
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f04f 0400 	mov.w	r4, #0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4623      	mov	r3, r4
 8000f62:	f7ff f94f 	bl	8000204 <__aeabi_uldivmod>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x298>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	0f1b      	lsrs	r3, r3, #28
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f80:	613b      	str	r3, [r7, #16]
      break;
 8000f82:	e002      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x29c>)
 8000f86:	613b      	str	r3, [r7, #16]
      break;
 8000f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f8a:	693b      	ldr	r3, [r7, #16]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	00f42400 	.word	0x00f42400
 8000f9c:	017d7840 	.word	0x017d7840

08000fa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 8083 	beq.w	80010c0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fba:	4b95      	ldr	r3, [pc, #596]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d019      	beq.n	8000ffa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fc6:	4b92      	ldr	r3, [pc, #584]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d106      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fde:	d00c      	beq.n	8000ffa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe0:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fe8:	2b0c      	cmp	r3, #12
 8000fea:	d112      	bne.n	8001012 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fec:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ff8:	d10b      	bne.n	8001012 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffa:	4b85      	ldr	r3, [pc, #532]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d05b      	beq.n	80010be <HAL_RCC_OscConfig+0x11e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d157      	bne.n	80010be <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e216      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x8a>
 800101c:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a7b      	ldr	r2, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e01d      	b.n	8001066 <HAL_RCC_OscConfig+0xc6>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0xae>
 8001034:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a75      	ldr	r2, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800103a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e00b      	b.n	8001066 <HAL_RCC_OscConfig+0xc6>
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a6f      	ldr	r2, [pc, #444]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a6c      	ldr	r2, [pc, #432]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d013      	beq.n	8001096 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106e:	f7ff faaf 	bl	80005d0 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff faab 	bl	80005d0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b64      	cmp	r3, #100	; 0x64
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e1db      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001088:	4b61      	ldr	r3, [pc, #388]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0xd6>
 8001094:	e014      	b.n	80010c0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff fa9b 	bl	80005d0 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109e:	f7ff fa97 	bl	80005d0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e1c7      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0xfe>
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d06f      	beq.n	80011ac <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80010cc:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d017      	beq.n	8001108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d105      	bne.n	80010f0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010f8:	2b0c      	cmp	r3, #12
 80010fa:	d11c      	bne.n	8001136 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d116      	bne.n	8001136 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_OscConfig+0x180>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d001      	beq.n	8001120 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e18f      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4938      	ldr	r1, [pc, #224]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001134:	e03a      	b.n	80011ac <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d020      	beq.n	8001180 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fa44 	bl	80005d0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114c:	f7ff fa40 	bl	80005d0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e170      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4925      	ldr	r1, [pc, #148]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
 800117e:	e015      	b.n	80011ac <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_OscConfig+0x274>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fa23 	bl	80005d0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fa1f 	bl	80005d0 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e14f      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d037      	beq.n	8001228 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d016      	beq.n	80011ee <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c6:	f7ff fa03 	bl	80005d0 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff f9ff 	bl	80005d0 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e12f      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x270>)
 80011e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x22e>
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_RCC_OscConfig+0x278>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f4:	f7ff f9ec 	bl	80005d0 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fa:	e00f      	b.n	800121c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fc:	f7ff f9e8 	bl	80005d0 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d908      	bls.n	800121c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e118      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	42470000 	.word	0x42470000
 8001218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	4b8a      	ldr	r3, [pc, #552]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800121e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e9      	bne.n	80011fc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8097 	beq.w	8001364 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800123a:	4b83      	ldr	r3, [pc, #524]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10f      	bne.n	8001266 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b7f      	ldr	r3, [pc, #508]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b7c      	ldr	r3, [pc, #496]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001266:	4b79      	ldr	r3, [pc, #484]	; (800144c <HAL_RCC_OscConfig+0x4ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d118      	bne.n	80012a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x4ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x4ac>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff f9a7 	bl	80005d0 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001286:	f7ff f9a3 	bl	80005d0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0d3      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	4b6c      	ldr	r3, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x4ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x31a>
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6713      	str	r3, [r2, #112]	; 0x70
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x354>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x33c>
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a60      	ldr	r2, [pc, #384]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
 80012ce:	4b5e      	ldr	r3, [pc, #376]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d2:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6713      	str	r3, [r2, #112]	; 0x70
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x354>
 80012dc:	4b5a      	ldr	r3, [pc, #360]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a59      	ldr	r2, [pc, #356]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012e2:	f023 0301 	bic.w	r3, r3, #1
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80012ee:	f023 0304 	bic.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d015      	beq.n	8001328 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff f968 	bl	80005d0 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff f964 	bl	80005d0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e092      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ee      	beq.n	8001304 <HAL_RCC_OscConfig+0x364>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff f952 	bl	80005d0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff f94e 	bl	80005d0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e07c      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001346:	4b40      	ldr	r3, [pc, #256]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ee      	bne.n	8001330 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800135e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d068      	beq.n	800143e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d060      	beq.n	800143a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d145      	bne.n	800140c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x4b0>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff f923 	bl	80005d0 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff f91f 	bl	80005d0 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e04f      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69da      	ldr	r2, [r3, #28]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	019b      	lsls	r3, r3, #6
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	085b      	lsrs	r3, r3, #1
 80013c4:	3b01      	subs	r3, #1
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	061b      	lsls	r3, r3, #24
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	071b      	lsls	r3, r3, #28
 80013d8:	491b      	ldr	r1, [pc, #108]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_RCC_OscConfig+0x4b0>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff f8f4 	bl	80005d0 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f8f0 	bl	80005d0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e020      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x44c>
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_RCC_OscConfig+0x4b0>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff f8dd 	bl	80005d0 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff f8d9 	bl	80005d0 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e009      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_RCC_OscConfig+0x4a8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x47a>
 8001438:	e001      	b.n	800143e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000
 8001450:	42470060 	.word	0x42470060

08001454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01d      	b.n	80014a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f001 f8e2 	bl	8002644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3304      	adds	r3, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f000 fb68 	bl	8001b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d007      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a1a      	ldr	r2, [r3, #32]
 8001510:	f241 1311 	movw	r3, #4369	; 0x1111
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_TIM_Base_Stop_IT+0x48>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	f240 4344 	movw	r3, #1092	; 0x444
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_TIM_Base_Stop_IT+0x48>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e01d      	b.n	8001596 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f815 	bl	800159e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3304      	adds	r3, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f000 faee 	bl	8001b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fdb8 	bl	800213c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_TIM_OC_Start+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_TIM_OC_Start+0x2c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_TIM_OC_Start+0x78>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_TIM_OC_Start+0x30>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_TIM_OC_Start+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b06      	cmp	r3, #6
 800160a:	d007      	beq.n	800161c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40010000 	.word	0x40010000
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fd7a 	bl	800213c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <HAL_TIM_OC_Stop+0xa0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_TIM_OC_Stop+0x2c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_TIM_OC_Stop+0xa4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_TIM_OC_Stop+0x30>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_TIM_OC_Stop+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d017      	beq.n	8001696 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <HAL_TIM_OC_Stop+0x66>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	f240 4344 	movw	r3, #1092	; 0x444
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d107      	bne.n	8001696 <HAL_TIM_OC_Stop+0x66>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	f241 1311 	movw	r3, #4369	; 0x1111
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <HAL_TIM_OC_Stop+0x96>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	f240 4344 	movw	r3, #1092	; 0x444
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <HAL_TIM_OC_Stop+0x96>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d122      	bne.n	8001734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d11b      	bne.n	8001734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0202 	mvn.w	r2, #2
 8001704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fa05 	bl	8001b2a <HAL_TIM_IC_CaptureCallback>
 8001720:	e005      	b.n	800172e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f9f7 	bl	8001b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fa08 	bl	8001b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b04      	cmp	r3, #4
 8001740:	d122      	bne.n	8001788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b04      	cmp	r3, #4
 800174e:	d11b      	bne.n	8001788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0204 	mvn.w	r2, #4
 8001758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f9db 	bl	8001b2a <HAL_TIM_IC_CaptureCallback>
 8001774:	e005      	b.n	8001782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f9cd 	bl	8001b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9de 	bl	8001b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b08      	cmp	r3, #8
 8001794:	d122      	bne.n	80017dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d11b      	bne.n	80017dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0208 	mvn.w	r2, #8
 80017ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f9b1 	bl	8001b2a <HAL_TIM_IC_CaptureCallback>
 80017c8:	e005      	b.n	80017d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f9a3 	bl	8001b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f9b4 	bl	8001b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d122      	bne.n	8001830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d11b      	bne.n	8001830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0210 	mvn.w	r2, #16
 8001800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2208      	movs	r2, #8
 8001806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f987 	bl	8001b2a <HAL_TIM_IC_CaptureCallback>
 800181c:	e005      	b.n	800182a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f979 	bl	8001b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f98a 	bl	8001b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10e      	bne.n	800185c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d107      	bne.n	800185c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f06f 0201 	mvn.w	r2, #1
 8001854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fe80 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	2b80      	cmp	r3, #128	; 0x80
 8001868:	d10e      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d107      	bne.n	8001888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fd06 	bl	8002294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001892:	2b40      	cmp	r3, #64	; 0x40
 8001894:	d10e      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d107      	bne.n	80018b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f94f 	bl	8001b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d10e      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d107      	bne.n	80018e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0220 	mvn.w	r2, #32
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fcd0 	bl	8002280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_TIM_OC_ConfigChannel+0x1a>
 80018fe:	2302      	movs	r3, #2
 8001900:	e04e      	b.n	80019a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d839      	bhi.n	800198c <HAL_TIM_OC_ConfigChannel+0xa4>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <HAL_TIM_OC_ConfigChannel+0x38>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001955 	.word	0x08001955
 8001924:	0800198d 	.word	0x0800198d
 8001928:	0800198d 	.word	0x0800198d
 800192c:	0800198d 	.word	0x0800198d
 8001930:	08001963 	.word	0x08001963
 8001934:	0800198d 	.word	0x0800198d
 8001938:	0800198d 	.word	0x0800198d
 800193c:	0800198d 	.word	0x0800198d
 8001940:	08001971 	.word	0x08001971
 8001944:	0800198d 	.word	0x0800198d
 8001948:	0800198d 	.word	0x0800198d
 800194c:	0800198d 	.word	0x0800198d
 8001950:	0800197f 	.word	0x0800197f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f9a4 	bl	8001ca8 <TIM_OC1_SetConfig>
      break;
 8001960:	e015      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fa0d 	bl	8001d88 <TIM_OC2_SetConfig>
      break;
 800196e:	e00e      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fa7c 	bl	8001e74 <TIM_OC3_SetConfig>
      break;
 800197c:	e007      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fae9 	bl	8001f5c <TIM_OC4_SetConfig>
      break;
 800198a:	e000      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800198c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_TIM_ConfigClockSource+0x18>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0a6      	b.n	8001b0e <HAL_TIM_ConfigClockSource+0x166>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d067      	beq.n	8001ac8 <HAL_TIM_ConfigClockSource+0x120>
 80019f8:	2b40      	cmp	r3, #64	; 0x40
 80019fa:	d80b      	bhi.n	8001a14 <HAL_TIM_ConfigClockSource+0x6c>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d073      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x140>
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d802      	bhi.n	8001a0a <HAL_TIM_ConfigClockSource+0x62>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d06f      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a08:	e078      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x140>
 8001a0e:	2b30      	cmp	r3, #48	; 0x30
 8001a10:	d06a      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a12:	e073      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a14:	2b70      	cmp	r3, #112	; 0x70
 8001a16:	d00d      	beq.n	8001a34 <HAL_TIM_ConfigClockSource+0x8c>
 8001a18:	2b70      	cmp	r3, #112	; 0x70
 8001a1a:	d804      	bhi.n	8001a26 <HAL_TIM_ConfigClockSource+0x7e>
 8001a1c:	2b50      	cmp	r3, #80	; 0x50
 8001a1e:	d033      	beq.n	8001a88 <HAL_TIM_ConfigClockSource+0xe0>
 8001a20:	2b60      	cmp	r3, #96	; 0x60
 8001a22:	d041      	beq.n	8001aa8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a24:	e06a      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d066      	beq.n	8001afa <HAL_TIM_ConfigClockSource+0x152>
 8001a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a30:	d017      	beq.n	8001a62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a32:	e063      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f000 fb5a 	bl	80020fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	609a      	str	r2, [r3, #8]
      break;
 8001a60:	e04c      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6899      	ldr	r1, [r3, #8]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f000 fb43 	bl	80020fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a84:	609a      	str	r2, [r3, #8]
      break;
 8001a86:	e039      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f000 fab7 	bl	8002008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2150      	movs	r1, #80	; 0x50
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fb10 	bl	80020c6 <TIM_ITRx_SetConfig>
      break;
 8001aa6:	e029      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f000 fad6 	bl	8002066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2160      	movs	r1, #96	; 0x60
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fb00 	bl	80020c6 <TIM_ITRx_SetConfig>
      break;
 8001ac6:	e019      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f000 fa97 	bl	8002008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 faf0 	bl	80020c6 <TIM_ITRx_SetConfig>
      break;
 8001ae6:	e009      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 fae7 	bl	80020c6 <TIM_ITRx_SetConfig>
      break;
 8001af8:	e000      	b.n	8001afc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <TIM_Base_SetConfig+0x114>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <TIM_Base_SetConfig+0x40>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b86:	d00f      	beq.n	8001ba8 <TIM_Base_SetConfig+0x40>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3d      	ldr	r2, [pc, #244]	; (8001c80 <TIM_Base_SetConfig+0x118>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00b      	beq.n	8001ba8 <TIM_Base_SetConfig+0x40>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <TIM_Base_SetConfig+0x11c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <TIM_Base_SetConfig+0x40>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <TIM_Base_SetConfig+0x120>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d003      	beq.n	8001ba8 <TIM_Base_SetConfig+0x40>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <TIM_Base_SetConfig+0x124>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d108      	bne.n	8001bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <TIM_Base_SetConfig+0x114>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d02b      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d027      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <TIM_Base_SetConfig+0x118>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d023      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <TIM_Base_SetConfig+0x11c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <TIM_Base_SetConfig+0x120>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01b      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <TIM_Base_SetConfig+0x124>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d017      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <TIM_Base_SetConfig+0x128>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <TIM_Base_SetConfig+0x12c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00f      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <TIM_Base_SetConfig+0x130>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00b      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <TIM_Base_SetConfig+0x134>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <TIM_Base_SetConfig+0x138>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d003      	beq.n	8001c1a <TIM_Base_SetConfig+0xb2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <TIM_Base_SetConfig+0x13c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d108      	bne.n	8001c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <TIM_Base_SetConfig+0x114>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <TIM_Base_SetConfig+0xf8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <TIM_Base_SetConfig+0x124>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d103      	bne.n	8001c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	615a      	str	r2, [r3, #20]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40000c00 	.word	0x40000c00
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	40014000 	.word	0x40014000
 8001c94:	40014400 	.word	0x40014400
 8001c98:	40014800 	.word	0x40014800
 8001c9c:	40001800 	.word	0x40001800
 8001ca0:	40001c00 	.word	0x40001c00
 8001ca4:	40002000 	.word	0x40002000

08001ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	f023 0201 	bic.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f023 0302 	bic.w	r3, r3, #2
 8001cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <TIM_OC1_SetConfig+0xd8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <TIM_OC1_SetConfig+0x64>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <TIM_OC1_SetConfig+0xdc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d10c      	bne.n	8001d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f023 0308 	bic.w	r3, r3, #8
 8001d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <TIM_OC1_SetConfig+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d003      	beq.n	8001d36 <TIM_OC1_SetConfig+0x8e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <TIM_OC1_SetConfig+0xdc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d111      	bne.n	8001d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	621a      	str	r2, [r3, #32]
}
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010400 	.word	0x40010400

08001d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	f023 0210 	bic.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f023 0320 	bic.w	r3, r3, #32
 8001dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <TIM_OC2_SetConfig+0xe4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_OC2_SetConfig+0x68>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <TIM_OC2_SetConfig+0xe8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d10d      	bne.n	8001e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <TIM_OC2_SetConfig+0xe4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d003      	beq.n	8001e1c <TIM_OC2_SetConfig+0x94>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <TIM_OC2_SetConfig+0xe8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d113      	bne.n	8001e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	621a      	str	r2, [r3, #32]
}
 8001e5e:	bf00      	nop
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	40010400 	.word	0x40010400

08001e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <TIM_OC3_SetConfig+0xe0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d003      	beq.n	8001eda <TIM_OC3_SetConfig+0x66>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <TIM_OC3_SetConfig+0xe4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10d      	bne.n	8001ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <TIM_OC3_SetConfig+0xe0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <TIM_OC3_SetConfig+0x92>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <TIM_OC3_SetConfig+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d113      	bne.n	8001f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	621a      	str	r2, [r3, #32]
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40010400 	.word	0x40010400

08001f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	031b      	lsls	r3, r3, #12
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <TIM_OC4_SetConfig+0xa4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_OC4_SetConfig+0x68>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <TIM_OC4_SetConfig+0xa8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d109      	bne.n	8001fd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	621a      	str	r2, [r3, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	40010400 	.word	0x40010400

08002008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f023 0201 	bic.w	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f023 030a 	bic.w	r3, r3, #10
 8002044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	621a      	str	r2, [r3, #32]
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 0210 	bic.w	r2, r3, #16
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	031b      	lsls	r3, r3, #12
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	621a      	str	r2, [r3, #32]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f043 0307 	orr.w	r3, r3, #7
 80020e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	431a      	orrs	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	609a      	str	r2, [r3, #8]
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2201      	movs	r2, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	43db      	mvns	r3, r3
 800215e:	401a      	ands	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	621a      	str	r2, [r3, #32]
}
 800217a:	bf00      	nop
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800219c:	2302      	movs	r3, #2
 800219e:	e05a      	b.n	8002256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ec:	d01d      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d018      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00e      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d004      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10c      	bne.n	8002244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4313      	orrs	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40010400 	.word	0x40010400
 8002278:	40014000 	.word	0x40014000
 800227c:	40001800 	.word	0x40001800

08002280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	HAL_Init();
 80022ac:	f7fe f92a 	bl	8000504 <HAL_Init>
	SystemClock_Config();
 80022b0:	f000 f818 	bl	80022e4 <SystemClock_Config>
	MX_GPIO_Init();
 80022b4:	f000 f910 	bl	80024d8 <MX_GPIO_Init>
	MX_TIM3_Init();
 80022b8:	f000 f874 	bl	80023a4 <MX_TIM3_Init>
	MX_TIM10_Init();
 80022bc:	f000 f8e8 	bl	8002490 <MX_TIM10_Init>

	init_usart2(19200, 16000000);
 80022c0:	4906      	ldr	r1, [pc, #24]	; (80022dc <main+0x34>)
 80022c2:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 80022c6:	f000 fb65 	bl	8002994 <init_usart2>

	// dont start playing until a key is recieved
	if (getchar()) {
 80022ca:	f000 fbeb 	bl	8002aa4 <getchar>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <main+0x32>
		HAL_TIM_Base_Start_IT(&htim10);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <main+0x38>)
 80022d6:	f7ff f8e8 	bl	80014aa <HAL_TIM_Base_Start_IT>
	}

	while (1);
 80022da:	e7fe      	b.n	80022da <main+0x32>
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	2000022c 	.word	0x2000022c

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	2234      	movs	r2, #52	; 0x34
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fc0c 	bl	8002b10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
  */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <SystemClock_Config+0xb8>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <SystemClock_Config+0xb8>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <SystemClock_Config+0xb8>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002324:	2300      	movs	r3, #0
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <SystemClock_Config+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002330:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <SystemClock_Config+0xbc>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <SystemClock_Config+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002344:	2302      	movs	r3, #2
 8002346:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002348:	2301      	movs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234c:	2310      	movs	r3, #16
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fe21 	bl	8000fa0 <HAL_RCC_OscConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8002364:	f000 f8d2 	bl	800250c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002368:	230f      	movs	r3, #15
 800236a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fbd4 	bl	8000b30 <HAL_RCC_ClockConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0xae>
	{
		Error_Handler();
 800238e:	f000 f8bd 	bl	800250c <Error_Handler>
	}
}
 8002392:	bf00      	nop
 8002394:	3750      	adds	r7, #80	; 0x50
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000

080023a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023d6:	4a2d      	ldr	r2, [pc, #180]	; (800248c <MX_TIM3_Init+0xe8>)
 80023d8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023f8:	4823      	ldr	r0, [pc, #140]	; (8002488 <MX_TIM3_Init+0xe4>)
 80023fa:	f7ff f82b 	bl	8001454 <HAL_TIM_Base_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0x64>
	{
		Error_Handler();
 8002404:	f000 f882 	bl	800250c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800240e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002412:	4619      	mov	r1, r3
 8002414:	481c      	ldr	r0, [pc, #112]	; (8002488 <MX_TIM3_Init+0xe4>)
 8002416:	f7ff fac7 	bl	80019a8 <HAL_TIM_ConfigClockSource>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM3_Init+0x80>
	{
		Error_Handler();
 8002420:	f000 f874 	bl	800250c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002424:	4818      	ldr	r0, [pc, #96]	; (8002488 <MX_TIM3_Init+0xe4>)
 8002426:	f7ff f88f 	bl	8001548 <HAL_TIM_OC_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM3_Init+0x90>
	{
		Error_Handler();
 8002430:	f000 f86c 	bl	800250c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	4619      	mov	r1, r3
 8002442:	4811      	ldr	r0, [pc, #68]	; (8002488 <MX_TIM3_Init+0xe4>)
 8002444:	f7ff fea0 	bl	8002188 <HAL_TIMEx_MasterConfigSynchronization>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM3_Init+0xae>
	{
		Error_Handler();
 800244e:	f000 f85d 	bl	800250c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002452:	2330      	movs	r3, #48	; 0x30
 8002454:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	4619      	mov	r1, r3
 8002468:	4807      	ldr	r0, [pc, #28]	; (8002488 <MX_TIM3_Init+0xe4>)
 800246a:	f7ff fa3d 	bl	80018e8 <HAL_TIM_OC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM3_Init+0xd4>
	{
		Error_Handler();
 8002474:	f000 f84a 	bl	800250c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <MX_TIM3_Init+0xe4>)
 800247a:	f000 f921 	bl	80026c0 <HAL_TIM_MspPostInit>
}
 800247e:	bf00      	nop
 8002480:	3738      	adds	r7, #56	; 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000026c 	.word	0x2000026c
 800248c:	40000400 	.word	0x40000400

08002490 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_TIM10_Init+0x40>)
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <MX_TIM10_Init+0x44>)
 8002498:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 830;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_TIM10_Init+0x40>)
 800249c:	f240 323e 	movw	r2, #830	; 0x33e
 80024a0:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_TIM10_Init+0x40>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 0;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_TIM10_Init+0x40>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_TIM10_Init+0x40>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_TIM10_Init+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_TIM10_Init+0x40>)
 80024bc:	f7fe ffca 	bl	8001454 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM10_Init+0x3a>
	{
		Error_Handler();
 80024c6:	f000 f821 	bl	800250c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000022c 	.word	0x2000022c
 80024d4:	40014400 	.word	0x40014400

080024d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_GPIO_Init+0x30>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <MX_GPIO_Init+0x30>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_GPIO_Init+0x30>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <change_freq>:
#include "uart_driver.h"

extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim10;

static void change_freq(int freq) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
    htim3.Init.Period = freq;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <change_freq+0x1c>)
 8002528:	60d3      	str	r3, [r2, #12]
    HAL_TIM_OC_Init(&htim3);
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <change_freq+0x1c>)
 800252c:	f7ff f80c 	bl	8001548 <HAL_TIM_OC_Init>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	2000026c 	.word	0x2000026c

0800253c <change_delay>:

static void change_delay(int len) {
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    static int *tim10 = (int *)0x4001442C;
    *tim10 = len;
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <change_delay+0x1c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	20000194 	.word	0x20000194

0800255c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    if (htim == &htim10) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d136      	bne.n	80025da <HAL_TIM_PeriodElapsedCallback+0x7e>

        // stop the timers
        HAL_TIM_Base_Stop_IT(&htim10);
 800256c:	481d      	ldr	r0, [pc, #116]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800256e:	f7fe ffc0 	bl	80014f2 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);
 8002572:	2100      	movs	r1, #0
 8002574:	481c      	ldr	r0, [pc, #112]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002576:	f7ff f85b 	bl	8001630 <HAL_TIM_OC_Stop>

        if (cur_song->len != 0) {
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d02a      	beq.n	80025da <HAL_TIM_PeriodElapsedCallback+0x7e>
            int freq = cur_song->freq;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
            int len = cur_song->len;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]

            int arr_val = freq != 0 ? 16000000 / (2 * freq) : 0;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80025a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
            int del = len * 20;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	60bb      	str	r3, [r7, #8]

            // change note frequency
            change_freq(arr_val);
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ffb0 	bl	800251c <change_freq>

            // change note duration
            change_delay(del);
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f7ff ffbd 	bl	800253c <change_delay>

            // startup the timers
            HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 80025c2:	2100      	movs	r1, #0
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80025c6:	f7fe fff5 	bl	80015b4 <HAL_TIM_OC_Start>
            HAL_TIM_Base_Start_IT(&htim10);
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80025cc:	f7fe ff6d 	bl	80014aa <HAL_TIM_Base_Start_IT>

            // inc pointer
            cur_song++;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3308      	adds	r3, #8
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80025d8:	6013      	str	r3, [r2, #0]
        }
    }
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2000022c 	.word	0x2000022c
 80025e8:	2000026c 	.word	0x2000026c
 80025ec:	20000190 	.word	0x20000190
 80025f0:	00f42400 	.word	0x00f42400

080025f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_MspInit+0x4c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <HAL_MspInit+0x4c>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_MspInit+0x4c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_MspInit+0x4c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_MspInit+0x4c>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_MspInit+0x4c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_TIM_Base_MspInit+0x70>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002672:	e01a      	b.n	80026aa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_TIM_Base_MspInit+0x78>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d115      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_Base_MspInit+0x74>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2019      	movs	r0, #25
 80026a0:	f7fe f87d 	bl	800079e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026a4:	2019      	movs	r0, #25
 80026a6:	f7fe f896 	bl	80007d6 <HAL_NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40014400 	.word	0x40014400

080026c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_TIM_MspPostInit+0x68>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d11d      	bne.n	800271e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_TIM_MspPostInit+0x6c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026fe:	2310      	movs	r3, #16
 8002700:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270e:	2302      	movs	r3, #2
 8002710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	4619      	mov	r1, r3
 8002718:	4805      	ldr	r0, [pc, #20]	; (8002730 <HAL_TIM_MspPostInit+0x70>)
 800271a:	f7fe f877 	bl	800080c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40000400 	.word	0x40000400
 800272c:	40023800 	.word	0x40023800
 8002730:	40020400 	.word	0x40020400

08002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <MemManage_Handler+0x4>

0800274e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <BusFault_Handler+0x4>

08002754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <UsageFault_Handler+0x4>

0800275a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002788:	f7fd ff0e 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}

08002790 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002796:	f7fe ff9f 	bl	80016d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000022c 	.word	0x2000022c

080027a4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
	return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
	return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x50>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x16>
		heap_end = &end;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <_sbrk+0x50>)
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <_sbrk+0x54>)
 8002820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <_sbrk+0x50>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <_sbrk+0x50>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	466a      	mov	r2, sp
 8002832:	4293      	cmp	r3, r2
 8002834:	d907      	bls.n	8002846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002836:	f000 f92f 	bl	8002a98 <__errno>
 800283a:	4602      	mov	r2, r0
 800283c:	230c      	movs	r3, #12
 800283e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e006      	b.n	8002854 <_sbrk+0x48>
	}

	heap_end += incr;
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <_sbrk+0x50>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a03      	ldr	r2, [pc, #12]	; (800285c <_sbrk+0x50>)
 8002850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000021c 	.word	0x2000021c
 8002860:	200002b0 	.word	0x200002b0

08002864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <SystemInit+0x28>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <SystemInit+0x28>)
 8002870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <SystemInit+0x28>)
 800287a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287e:	609a      	str	r2, [r3, #8]
#endif
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <_read>:


// These will override _read and _write in syscalls.c, which are
// prototyped as weak
int _read(int file, char *ptr, int len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	// Modified the for loop in order to get the correct behavior for fgets
	int byteCnt = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e012      	b.n	80028cc <_read+0x3c>
	{
		//*ptr++ = __io_getchar();
		byteCnt++;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3301      	adds	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
		//*ptr++ = usart2_getch();
		*ptr = usart2_getch();
 80028ac:	f000 f836 	bl	800291c <usart2_getch>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	701a      	strb	r2, [r3, #0]
		if(*ptr == '\n') break;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b0a      	cmp	r3, #10
 80028be:	d00a      	beq.n	80028d6 <_read+0x46>
		ptr++;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3301      	adds	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	dbe8      	blt.n	80028a6 <_read+0x16>
 80028d4:	e000      	b.n	80028d8 <_read+0x48>
		if(*ptr == '\n') break;
 80028d6:	bf00      	nop
	}

	//return len;
	return byteCnt; // Return byte count
 80028d8:	693b      	ldr	r3, [r7, #16]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_write>:

int _write(int file, char *ptr, int len)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e009      	b.n	8002908 <_write+0x26>
	{
		usart2_putch(*ptr++);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	60ba      	str	r2, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f82f 	bl	8002960 <usart2_putch>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf1      	blt.n	80028f4 <_write+0x12>
	}
	return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <usart2_getch>:



char usart2_getch(){
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
	char c;
	while((*(USART_SR)&(1<<RXNE)) != (1<<RXNE));
 8002922:	bf00      	nop
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <usart2_getch+0x3c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b20      	cmp	r3, #32
 800292e:	d1f9      	bne.n	8002924 <usart2_getch+0x8>
	c = ((char) *USART_DR);  // Read character from usart
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <usart2_getch+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	71fb      	strb	r3, [r7, #7]
	usart2_putch(c);  // Echo back
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f811 	bl	8002960 <usart2_putch>

	if (c == '\r'){  // If character is CR
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b0d      	cmp	r3, #13
 8002942:	d104      	bne.n	800294e <usart2_getch+0x32>
		usart2_putch('\n');  // send it
 8002944:	200a      	movs	r0, #10
 8002946:	f000 f80b 	bl	8002960 <usart2_putch>
		c = '\n';   // Return LF. fgets is terminated by LF
 800294a:	230a      	movs	r3, #10
 800294c:	71fb      	strb	r3, [r7, #7]
	}

	return c;
 800294e:	79fb      	ldrb	r3, [r7, #7]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40004400 	.word	0x40004400
 800295c:	40004404 	.word	0x40004404

08002960 <usart2_putch>:

void usart2_putch(char c){
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	while((*(USART_SR)&(1<<TXE)) != (1<<TXE));
 800296a:	bf00      	nop
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <usart2_putch+0x2c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d1f9      	bne.n	800296c <usart2_putch+0xc>
	*(USART_DR) = c;
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <usart2_putch+0x30>)
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40004400 	.word	0x40004400
 8002990:	40004404 	.word	0x40004404

08002994 <init_usart2>:

void init_usart2(uint32_t baud, uint32_t sysclk){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
	// Enable clocks for GPIOA and USART2
	*(RCC_AHB1ENR) |= (1<<GPIOAEN);
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <init_usart2+0x8c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <init_usart2+0x8c>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]
	*(RCC_APB1ENR) |= (1<<USART2EN);
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <init_usart2+0x90>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <init_usart2+0x90>)
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	6013      	str	r3, [r2, #0]

	// Function 7 of PORTA pins is USART
	*(GPIOA_AFRL) &= (0xFFFF00FF); // Clear the bits associated with PA3 and PA2
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <init_usart2+0x94>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <init_usart2+0x94>)
 80029bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c0:	6013      	str	r3, [r2, #0]
	*(GPIOA_AFRL) |= (0b01110111<<8);  // Choose function 7 for both PA3 and PA2
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <init_usart2+0x94>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <init_usart2+0x94>)
 80029c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80029cc:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) &= (0xFFFFFF0F);  // Clear mode bits for PA3 and PA2
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <init_usart2+0x98>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <init_usart2+0x98>)
 80029d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d8:	6013      	str	r3, [r2, #0]
	*(GPIOA_MODER) |= (0b1010<<4);  // Both PA3 and PA2 in alt function mode
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <init_usart2+0x98>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <init_usart2+0x98>)
 80029e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80029e4:	6013      	str	r3, [r2, #0]
	//USART2_init();  //8n1 no flow control
	// over8 = 0..oversample by 16
	// M = 0..1 start bit, data size is 8, 1 stop bit
	// PCE= 0..Parity check not enabled
	// no interrupts... using polling
	*(USART_CR1) = (1<<UE)|(1<<TE)|(1<<RE); // Enable UART, Tx and Rx
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <init_usart2+0x9c>)
 80029e8:	f242 020c 	movw	r2, #8204	; 0x200c
 80029ec:	601a      	str	r2, [r3, #0]
	*(USART_CR2) = 0;  // This is the default, but do it anyway
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <init_usart2+0xa0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
	*(USART_CR3) = 0;  // This is the default, but do it anyway
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <init_usart2+0xa4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
	*(USART_BRR) = sysclk/baud;
 80029fa:	4910      	ldr	r1, [pc, #64]	; (8002a3c <init_usart2+0xa8>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	600b      	str	r3, [r1, #0]

	/* I'm not sure if this is needed for standard IO*/
	 //setvbuf(stderr, NULL, _IONBF, 0);
	 //setvbuf(stdin, NULL, _IONBF, 0);
	 setvbuf(stdout, NULL, _IONBF, 0);
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <init_usart2+0xac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6898      	ldr	r0, [r3, #8]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2202      	movs	r2, #2
 8002a10:	2100      	movs	r1, #0
 8002a12:	f000 f885 	bl	8002b20 <setvbuf>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023830 	.word	0x40023830
 8002a24:	40023840 	.word	0x40023840
 8002a28:	40020020 	.word	0x40020020
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	4000440c 	.word	0x4000440c
 8002a34:	40004410 	.word	0x40004410
 8002a38:	40004414 	.word	0x40004414
 8002a3c:	40004408 	.word	0x40004408
 8002a40:	2000019c 	.word	0x2000019c

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a4a:	e003      	b.n	8002a54 <LoopCopyDataInit>

08002a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a52:	3104      	adds	r1, #4

08002a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a5c:	d3f6      	bcc.n	8002a4c <CopyDataInit>
  ldr  r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a60:	e002      	b.n	8002a68 <LoopFillZerobss>

08002a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a64:	f842 3b04 	str.w	r3, [r2], #4

08002a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a6c:	d3f9      	bcc.n	8002a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6e:	f7ff fef9 	bl	8002864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f000 f829 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7ff fc17 	bl	80022a8 <main>
  bx  lr    
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a80:	080035e8 	.word	0x080035e8
  ldr  r0, =_sdata
 8002a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a88:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8002a8c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8002a90:	200002b0 	.word	0x200002b0

08002a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC_IRQHandler>
	...

08002a98 <__errno>:
 8002a98:	4b01      	ldr	r3, [pc, #4]	; (8002aa0 <__errno+0x8>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000019c 	.word	0x2000019c

08002aa4 <getchar>:
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <getchar+0x20>)
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	681c      	ldr	r4, [r3, #0]
 8002aaa:	b124      	cbz	r4, 8002ab6 <getchar+0x12>
 8002aac:	69a3      	ldr	r3, [r4, #24]
 8002aae:	b913      	cbnz	r3, 8002ab6 <getchar+0x12>
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f000 f9e5 	bl	8002e80 <__sinit>
 8002ab6:	6861      	ldr	r1, [r4, #4]
 8002ab8:	4620      	mov	r0, r4
 8002aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002abe:	f000 ba85 	b.w	8002fcc <_getc_r>
 8002ac2:	bf00      	nop
 8002ac4:	2000019c 	.word	0x2000019c

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4e0d      	ldr	r6, [pc, #52]	; (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1ba4      	subs	r4, r4, r6
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	42a5      	cmp	r5, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4e0b      	ldr	r6, [pc, #44]	; (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 fd36 	bl	800354c <_init>
 8002ae0:	1ba4      	subs	r4, r4, r6
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	42a5      	cmp	r5, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af0:	4798      	blx	r3
 8002af2:	3501      	adds	r5, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002afa:	4798      	blx	r3
 8002afc:	3501      	adds	r5, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	080035e0 	.word	0x080035e0
 8002b04:	080035e0 	.word	0x080035e0
 8002b08:	080035e0 	.word	0x080035e0
 8002b0c:	080035e4 	.word	0x080035e4

08002b10 <memset>:
 8002b10:	4402      	add	r2, r0
 8002b12:	4603      	mov	r3, r0
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <memset+0xa>
 8002b18:	4770      	bx	lr
 8002b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1e:	e7f9      	b.n	8002b14 <memset+0x4>

08002b20 <setvbuf>:
 8002b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b24:	461d      	mov	r5, r3
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <setvbuf+0x14c>)
 8002b28:	681e      	ldr	r6, [r3, #0]
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460f      	mov	r7, r1
 8002b2e:	4690      	mov	r8, r2
 8002b30:	b126      	cbz	r6, 8002b3c <setvbuf+0x1c>
 8002b32:	69b3      	ldr	r3, [r6, #24]
 8002b34:	b913      	cbnz	r3, 8002b3c <setvbuf+0x1c>
 8002b36:	4630      	mov	r0, r6
 8002b38:	f000 f9a2 	bl	8002e80 <__sinit>
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <setvbuf+0x150>)
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d152      	bne.n	8002be8 <setvbuf+0xc8>
 8002b42:	6874      	ldr	r4, [r6, #4]
 8002b44:	f1b8 0f02 	cmp.w	r8, #2
 8002b48:	d006      	beq.n	8002b58 <setvbuf+0x38>
 8002b4a:	f1b8 0f01 	cmp.w	r8, #1
 8002b4e:	f200 8089 	bhi.w	8002c64 <setvbuf+0x144>
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	f2c0 8086 	blt.w	8002c64 <setvbuf+0x144>
 8002b58:	4621      	mov	r1, r4
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 f914 	bl	8002d88 <_fflush_r>
 8002b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b62:	b141      	cbz	r1, 8002b76 <setvbuf+0x56>
 8002b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	d002      	beq.n	8002b72 <setvbuf+0x52>
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 fac5 	bl	80030fc <_free_r>
 8002b72:	2300      	movs	r3, #0
 8002b74:	6363      	str	r3, [r4, #52]	; 0x34
 8002b76:	2300      	movs	r3, #0
 8002b78:	61a3      	str	r3, [r4, #24]
 8002b7a:	6063      	str	r3, [r4, #4]
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	d503      	bpl.n	8002b8a <setvbuf+0x6a>
 8002b82:	6921      	ldr	r1, [r4, #16]
 8002b84:	4630      	mov	r0, r6
 8002b86:	f000 fab9 	bl	80030fc <_free_r>
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	f1b8 0f02 	cmp.w	r8, #2
 8002b98:	81a3      	strh	r3, [r4, #12]
 8002b9a:	d05d      	beq.n	8002c58 <setvbuf+0x138>
 8002b9c:	ab01      	add	r3, sp, #4
 8002b9e:	466a      	mov	r2, sp
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	f000 fa3e 	bl	8003024 <__swhatbuf_r>
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	4318      	orrs	r0, r3
 8002bac:	81a0      	strh	r0, [r4, #12]
 8002bae:	bb2d      	cbnz	r5, 8002bfc <setvbuf+0xdc>
 8002bb0:	9d00      	ldr	r5, [sp, #0]
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f000 fa9a 	bl	80030ec <malloc>
 8002bb8:	4607      	mov	r7, r0
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d14e      	bne.n	8002c5c <setvbuf+0x13c>
 8002bbe:	f8dd 9000 	ldr.w	r9, [sp]
 8002bc2:	45a9      	cmp	r9, r5
 8002bc4:	d13c      	bne.n	8002c40 <setvbuf+0x120>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60a3      	str	r3, [r4, #8]
 8002bd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bda:	6023      	str	r3, [r4, #0]
 8002bdc:	6123      	str	r3, [r4, #16]
 8002bde:	2301      	movs	r3, #1
 8002be0:	6163      	str	r3, [r4, #20]
 8002be2:	b003      	add	sp, #12
 8002be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <setvbuf+0x154>)
 8002bea:	429c      	cmp	r4, r3
 8002bec:	d101      	bne.n	8002bf2 <setvbuf+0xd2>
 8002bee:	68b4      	ldr	r4, [r6, #8]
 8002bf0:	e7a8      	b.n	8002b44 <setvbuf+0x24>
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <setvbuf+0x158>)
 8002bf4:	429c      	cmp	r4, r3
 8002bf6:	bf08      	it	eq
 8002bf8:	68f4      	ldreq	r4, [r6, #12]
 8002bfa:	e7a3      	b.n	8002b44 <setvbuf+0x24>
 8002bfc:	2f00      	cmp	r7, #0
 8002bfe:	d0d8      	beq.n	8002bb2 <setvbuf+0x92>
 8002c00:	69b3      	ldr	r3, [r6, #24]
 8002c02:	b913      	cbnz	r3, 8002c0a <setvbuf+0xea>
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f93b 	bl	8002e80 <__sinit>
 8002c0a:	f1b8 0f01 	cmp.w	r8, #1
 8002c0e:	bf08      	it	eq
 8002c10:	89a3      	ldrheq	r3, [r4, #12]
 8002c12:	6027      	str	r7, [r4, #0]
 8002c14:	bf04      	itt	eq
 8002c16:	f043 0301 	orreq.w	r3, r3, #1
 8002c1a:	81a3      	strheq	r3, [r4, #12]
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	f013 0008 	ands.w	r0, r3, #8
 8002c22:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8002c26:	d01b      	beq.n	8002c60 <setvbuf+0x140>
 8002c28:	f013 0001 	ands.w	r0, r3, #1
 8002c2c:	bf18      	it	ne
 8002c2e:	426d      	negne	r5, r5
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	bf1d      	ittte	ne
 8002c36:	60a3      	strne	r3, [r4, #8]
 8002c38:	61a5      	strne	r5, [r4, #24]
 8002c3a:	4618      	movne	r0, r3
 8002c3c:	60a5      	streq	r5, [r4, #8]
 8002c3e:	e7d0      	b.n	8002be2 <setvbuf+0xc2>
 8002c40:	4648      	mov	r0, r9
 8002c42:	f000 fa53 	bl	80030ec <malloc>
 8002c46:	4607      	mov	r7, r0
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d0bc      	beq.n	8002bc6 <setvbuf+0xa6>
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	81a3      	strh	r3, [r4, #12]
 8002c54:	464d      	mov	r5, r9
 8002c56:	e7d3      	b.n	8002c00 <setvbuf+0xe0>
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e7b6      	b.n	8002bca <setvbuf+0xaa>
 8002c5c:	46a9      	mov	r9, r5
 8002c5e:	e7f5      	b.n	8002c4c <setvbuf+0x12c>
 8002c60:	60a0      	str	r0, [r4, #8]
 8002c62:	e7be      	b.n	8002be2 <setvbuf+0xc2>
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	e7bb      	b.n	8002be2 <setvbuf+0xc2>
 8002c6a:	bf00      	nop
 8002c6c:	2000019c 	.word	0x2000019c
 8002c70:	08003598 	.word	0x08003598
 8002c74:	080035b8 	.word	0x080035b8
 8002c78:	08003578 	.word	0x08003578

08002c7c <__sflush_r>:
 8002c7c:	898a      	ldrh	r2, [r1, #12]
 8002c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c82:	4605      	mov	r5, r0
 8002c84:	0710      	lsls	r0, r2, #28
 8002c86:	460c      	mov	r4, r1
 8002c88:	d458      	bmi.n	8002d3c <__sflush_r+0xc0>
 8002c8a:	684b      	ldr	r3, [r1, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	dc05      	bgt.n	8002c9c <__sflush_r+0x20>
 8002c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc02      	bgt.n	8002c9c <__sflush_r+0x20>
 8002c96:	2000      	movs	r0, #0
 8002c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	d0f9      	beq.n	8002c96 <__sflush_r+0x1a>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ca8:	682f      	ldr	r7, [r5, #0]
 8002caa:	6a21      	ldr	r1, [r4, #32]
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	d032      	beq.n	8002d16 <__sflush_r+0x9a>
 8002cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	075a      	lsls	r2, r3, #29
 8002cb6:	d505      	bpl.n	8002cc4 <__sflush_r+0x48>
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	1ac0      	subs	r0, r0, r3
 8002cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cbe:	b10b      	cbz	r3, 8002cc4 <__sflush_r+0x48>
 8002cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cc2:	1ac0      	subs	r0, r0, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cca:	6a21      	ldr	r1, [r4, #32]
 8002ccc:	4628      	mov	r0, r5
 8002cce:	47b0      	blx	r6
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	d106      	bne.n	8002ce4 <__sflush_r+0x68>
 8002cd6:	6829      	ldr	r1, [r5, #0]
 8002cd8:	291d      	cmp	r1, #29
 8002cda:	d848      	bhi.n	8002d6e <__sflush_r+0xf2>
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <__sflush_r+0x108>)
 8002cde:	40ca      	lsrs	r2, r1
 8002ce0:	07d6      	lsls	r6, r2, #31
 8002ce2:	d544      	bpl.n	8002d6e <__sflush_r+0xf2>
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	6062      	str	r2, [r4, #4]
 8002ce8:	04d9      	lsls	r1, r3, #19
 8002cea:	6922      	ldr	r2, [r4, #16]
 8002cec:	6022      	str	r2, [r4, #0]
 8002cee:	d504      	bpl.n	8002cfa <__sflush_r+0x7e>
 8002cf0:	1c42      	adds	r2, r0, #1
 8002cf2:	d101      	bne.n	8002cf8 <__sflush_r+0x7c>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	b903      	cbnz	r3, 8002cfa <__sflush_r+0x7e>
 8002cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8002cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cfc:	602f      	str	r7, [r5, #0]
 8002cfe:	2900      	cmp	r1, #0
 8002d00:	d0c9      	beq.n	8002c96 <__sflush_r+0x1a>
 8002d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d06:	4299      	cmp	r1, r3
 8002d08:	d002      	beq.n	8002d10 <__sflush_r+0x94>
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f000 f9f6 	bl	80030fc <_free_r>
 8002d10:	2000      	movs	r0, #0
 8002d12:	6360      	str	r0, [r4, #52]	; 0x34
 8002d14:	e7c0      	b.n	8002c98 <__sflush_r+0x1c>
 8002d16:	2301      	movs	r3, #1
 8002d18:	4628      	mov	r0, r5
 8002d1a:	47b0      	blx	r6
 8002d1c:	1c41      	adds	r1, r0, #1
 8002d1e:	d1c8      	bne.n	8002cb2 <__sflush_r+0x36>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0c5      	beq.n	8002cb2 <__sflush_r+0x36>
 8002d26:	2b1d      	cmp	r3, #29
 8002d28:	d001      	beq.n	8002d2e <__sflush_r+0xb2>
 8002d2a:	2b16      	cmp	r3, #22
 8002d2c:	d101      	bne.n	8002d32 <__sflush_r+0xb6>
 8002d2e:	602f      	str	r7, [r5, #0]
 8002d30:	e7b1      	b.n	8002c96 <__sflush_r+0x1a>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d38:	81a3      	strh	r3, [r4, #12]
 8002d3a:	e7ad      	b.n	8002c98 <__sflush_r+0x1c>
 8002d3c:	690f      	ldr	r7, [r1, #16]
 8002d3e:	2f00      	cmp	r7, #0
 8002d40:	d0a9      	beq.n	8002c96 <__sflush_r+0x1a>
 8002d42:	0793      	lsls	r3, r2, #30
 8002d44:	680e      	ldr	r6, [r1, #0]
 8002d46:	bf08      	it	eq
 8002d48:	694b      	ldreq	r3, [r1, #20]
 8002d4a:	600f      	str	r7, [r1, #0]
 8002d4c:	bf18      	it	ne
 8002d4e:	2300      	movne	r3, #0
 8002d50:	eba6 0807 	sub.w	r8, r6, r7
 8002d54:	608b      	str	r3, [r1, #8]
 8002d56:	f1b8 0f00 	cmp.w	r8, #0
 8002d5a:	dd9c      	ble.n	8002c96 <__sflush_r+0x1a>
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	463a      	mov	r2, r7
 8002d60:	6a21      	ldr	r1, [r4, #32]
 8002d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b0      	blx	r6
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	dc06      	bgt.n	8002d7a <__sflush_r+0xfe>
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	e78e      	b.n	8002c98 <__sflush_r+0x1c>
 8002d7a:	4407      	add	r7, r0
 8002d7c:	eba8 0800 	sub.w	r8, r8, r0
 8002d80:	e7e9      	b.n	8002d56 <__sflush_r+0xda>
 8002d82:	bf00      	nop
 8002d84:	20400001 	.word	0x20400001

08002d88 <_fflush_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	690b      	ldr	r3, [r1, #16]
 8002d8c:	4605      	mov	r5, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	b1db      	cbz	r3, 8002dca <_fflush_r+0x42>
 8002d92:	b118      	cbz	r0, 8002d9c <_fflush_r+0x14>
 8002d94:	6983      	ldr	r3, [r0, #24]
 8002d96:	b90b      	cbnz	r3, 8002d9c <_fflush_r+0x14>
 8002d98:	f000 f872 	bl	8002e80 <__sinit>
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <_fflush_r+0x48>)
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d109      	bne.n	8002db6 <_fflush_r+0x2e>
 8002da2:	686c      	ldr	r4, [r5, #4]
 8002da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da8:	b17b      	cbz	r3, 8002dca <_fflush_r+0x42>
 8002daa:	4621      	mov	r1, r4
 8002dac:	4628      	mov	r0, r5
 8002dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002db2:	f7ff bf63 	b.w	8002c7c <__sflush_r>
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_fflush_r+0x4c>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d101      	bne.n	8002dc0 <_fflush_r+0x38>
 8002dbc:	68ac      	ldr	r4, [r5, #8]
 8002dbe:	e7f1      	b.n	8002da4 <_fflush_r+0x1c>
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <_fflush_r+0x50>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	bf08      	it	eq
 8002dc6:	68ec      	ldreq	r4, [r5, #12]
 8002dc8:	e7ec      	b.n	8002da4 <_fflush_r+0x1c>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
 8002dce:	bf00      	nop
 8002dd0:	08003598 	.word	0x08003598
 8002dd4:	080035b8 	.word	0x080035b8
 8002dd8:	08003578 	.word	0x08003578

08002ddc <fflush>:
 8002ddc:	4601      	mov	r1, r0
 8002dde:	b920      	cbnz	r0, 8002dea <fflush+0xe>
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <fflush+0x18>)
 8002de2:	4905      	ldr	r1, [pc, #20]	; (8002df8 <fflush+0x1c>)
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f000 b8d3 	b.w	8002f90 <_fwalk_reent>
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <fflush+0x20>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	f7ff bfcb 	b.w	8002d88 <_fflush_r>
 8002df2:	bf00      	nop
 8002df4:	08003574 	.word	0x08003574
 8002df8:	08002d89 	.word	0x08002d89
 8002dfc:	2000019c 	.word	0x2000019c

08002e00 <std>:
 8002e00:	2300      	movs	r3, #0
 8002e02:	b510      	push	{r4, lr}
 8002e04:	4604      	mov	r4, r0
 8002e06:	e9c0 3300 	strd	r3, r3, [r0]
 8002e0a:	6083      	str	r3, [r0, #8]
 8002e0c:	8181      	strh	r1, [r0, #12]
 8002e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e10:	81c2      	strh	r2, [r0, #14]
 8002e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e16:	6183      	str	r3, [r0, #24]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	305c      	adds	r0, #92	; 0x5c
 8002e1e:	f7ff fe77 	bl	8002b10 <memset>
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <std+0x38>)
 8002e24:	6263      	str	r3, [r4, #36]	; 0x24
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <std+0x3c>)
 8002e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <std+0x40>)
 8002e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <std+0x44>)
 8002e30:	6224      	str	r4, [r4, #32]
 8002e32:	6323      	str	r3, [r4, #48]	; 0x30
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	bf00      	nop
 8002e38:	080032c5 	.word	0x080032c5
 8002e3c:	080032e7 	.word	0x080032e7
 8002e40:	0800331f 	.word	0x0800331f
 8002e44:	08003343 	.word	0x08003343

08002e48 <_cleanup_r>:
 8002e48:	4901      	ldr	r1, [pc, #4]	; (8002e50 <_cleanup_r+0x8>)
 8002e4a:	f000 b8a1 	b.w	8002f90 <_fwalk_reent>
 8002e4e:	bf00      	nop
 8002e50:	08002d89 	.word	0x08002d89

08002e54 <__sfmoreglue>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	1e4a      	subs	r2, r1, #1
 8002e58:	2568      	movs	r5, #104	; 0x68
 8002e5a:	4355      	muls	r5, r2
 8002e5c:	460e      	mov	r6, r1
 8002e5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e62:	f000 f999 	bl	8003198 <_malloc_r>
 8002e66:	4604      	mov	r4, r0
 8002e68:	b140      	cbz	r0, 8002e7c <__sfmoreglue+0x28>
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	e9c0 1600 	strd	r1, r6, [r0]
 8002e70:	300c      	adds	r0, #12
 8002e72:	60a0      	str	r0, [r4, #8]
 8002e74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e78:	f7ff fe4a 	bl	8002b10 <memset>
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}

08002e80 <__sinit>:
 8002e80:	6983      	ldr	r3, [r0, #24]
 8002e82:	b510      	push	{r4, lr}
 8002e84:	4604      	mov	r4, r0
 8002e86:	bb33      	cbnz	r3, 8002ed6 <__sinit+0x56>
 8002e88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002e8c:	6503      	str	r3, [r0, #80]	; 0x50
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <__sinit+0x58>)
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <__sinit+0x5c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6282      	str	r2, [r0, #40]	; 0x28
 8002e96:	4298      	cmp	r0, r3
 8002e98:	bf04      	itt	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	6183      	streq	r3, [r0, #24]
 8002e9e:	f000 f81f 	bl	8002ee0 <__sfp>
 8002ea2:	6060      	str	r0, [r4, #4]
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 f81b 	bl	8002ee0 <__sfp>
 8002eaa:	60a0      	str	r0, [r4, #8]
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 f817 	bl	8002ee0 <__sfp>
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60e0      	str	r0, [r4, #12]
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	6860      	ldr	r0, [r4, #4]
 8002eba:	f7ff ffa1 	bl	8002e00 <std>
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2109      	movs	r1, #9
 8002ec2:	68a0      	ldr	r0, [r4, #8]
 8002ec4:	f7ff ff9c 	bl	8002e00 <std>
 8002ec8:	2202      	movs	r2, #2
 8002eca:	2112      	movs	r1, #18
 8002ecc:	68e0      	ldr	r0, [r4, #12]
 8002ece:	f7ff ff97 	bl	8002e00 <std>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61a3      	str	r3, [r4, #24]
 8002ed6:	bd10      	pop	{r4, pc}
 8002ed8:	08003574 	.word	0x08003574
 8002edc:	08002e49 	.word	0x08002e49

08002ee0 <__sfp>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <__sfp+0x70>)
 8002ee4:	681e      	ldr	r6, [r3, #0]
 8002ee6:	69b3      	ldr	r3, [r6, #24]
 8002ee8:	4607      	mov	r7, r0
 8002eea:	b913      	cbnz	r3, 8002ef2 <__sfp+0x12>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f7ff ffc7 	bl	8002e80 <__sinit>
 8002ef2:	3648      	adds	r6, #72	; 0x48
 8002ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	d503      	bpl.n	8002f04 <__sfp+0x24>
 8002efc:	6833      	ldr	r3, [r6, #0]
 8002efe:	b133      	cbz	r3, 8002f0e <__sfp+0x2e>
 8002f00:	6836      	ldr	r6, [r6, #0]
 8002f02:	e7f7      	b.n	8002ef4 <__sfp+0x14>
 8002f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f08:	b16d      	cbz	r5, 8002f26 <__sfp+0x46>
 8002f0a:	3468      	adds	r4, #104	; 0x68
 8002f0c:	e7f4      	b.n	8002ef8 <__sfp+0x18>
 8002f0e:	2104      	movs	r1, #4
 8002f10:	4638      	mov	r0, r7
 8002f12:	f7ff ff9f 	bl	8002e54 <__sfmoreglue>
 8002f16:	6030      	str	r0, [r6, #0]
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d1f1      	bne.n	8002f00 <__sfp+0x20>
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4604      	mov	r4, r0
 8002f22:	4620      	mov	r0, r4
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f26:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <__sfp+0x74>)
 8002f28:	6665      	str	r5, [r4, #100]	; 0x64
 8002f2a:	e9c4 5500 	strd	r5, r5, [r4]
 8002f2e:	60a5      	str	r5, [r4, #8]
 8002f30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002f34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f40:	f7ff fde6 	bl	8002b10 <memset>
 8002f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f4c:	e7e9      	b.n	8002f22 <__sfp+0x42>
 8002f4e:	bf00      	nop
 8002f50:	08003574 	.word	0x08003574
 8002f54:	ffff0001 	.word	0xffff0001

08002f58 <_fwalk>:
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	4688      	mov	r8, r1
 8002f5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f62:	2600      	movs	r6, #0
 8002f64:	b914      	cbnz	r4, 8002f6c <_fwalk+0x14>
 8002f66:	4630      	mov	r0, r6
 8002f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002f70:	3f01      	subs	r7, #1
 8002f72:	d501      	bpl.n	8002f78 <_fwalk+0x20>
 8002f74:	6824      	ldr	r4, [r4, #0]
 8002f76:	e7f5      	b.n	8002f64 <_fwalk+0xc>
 8002f78:	89ab      	ldrh	r3, [r5, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d906      	bls.n	8002f8c <_fwalk+0x34>
 8002f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f82:	3301      	adds	r3, #1
 8002f84:	d002      	beq.n	8002f8c <_fwalk+0x34>
 8002f86:	4628      	mov	r0, r5
 8002f88:	47c0      	blx	r8
 8002f8a:	4306      	orrs	r6, r0
 8002f8c:	3568      	adds	r5, #104	; 0x68
 8002f8e:	e7ef      	b.n	8002f70 <_fwalk+0x18>

08002f90 <_fwalk_reent>:
 8002f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f94:	4680      	mov	r8, r0
 8002f96:	4689      	mov	r9, r1
 8002f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f9c:	2600      	movs	r6, #0
 8002f9e:	b914      	cbnz	r4, 8002fa6 <_fwalk_reent+0x16>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002faa:	3f01      	subs	r7, #1
 8002fac:	d501      	bpl.n	8002fb2 <_fwalk_reent+0x22>
 8002fae:	6824      	ldr	r4, [r4, #0]
 8002fb0:	e7f5      	b.n	8002f9e <_fwalk_reent+0xe>
 8002fb2:	89ab      	ldrh	r3, [r5, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d907      	bls.n	8002fc8 <_fwalk_reent+0x38>
 8002fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d003      	beq.n	8002fc8 <_fwalk_reent+0x38>
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	47c8      	blx	r9
 8002fc6:	4306      	orrs	r6, r0
 8002fc8:	3568      	adds	r5, #104	; 0x68
 8002fca:	e7ee      	b.n	8002faa <_fwalk_reent+0x1a>

08002fcc <_getc_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	b118      	cbz	r0, 8002fdc <_getc_r+0x10>
 8002fd4:	6983      	ldr	r3, [r0, #24]
 8002fd6:	b90b      	cbnz	r3, 8002fdc <_getc_r+0x10>
 8002fd8:	f7ff ff52 	bl	8002e80 <__sinit>
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <_getc_r+0x4c>)
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	d10b      	bne.n	8002ffa <_getc_r+0x2e>
 8002fe2:	686c      	ldr	r4, [r5, #4]
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	da0f      	bge.n	800300e <_getc_r+0x42>
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff6:	f000 b929 	b.w	800324c <__srget_r>
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <_getc_r+0x50>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	d101      	bne.n	8003004 <_getc_r+0x38>
 8003000:	68ac      	ldr	r4, [r5, #8]
 8003002:	e7ef      	b.n	8002fe4 <_getc_r+0x18>
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <_getc_r+0x54>)
 8003006:	429c      	cmp	r4, r3
 8003008:	bf08      	it	eq
 800300a:	68ec      	ldreq	r4, [r5, #12]
 800300c:	e7ea      	b.n	8002fe4 <_getc_r+0x18>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	6022      	str	r2, [r4, #0]
 8003014:	7818      	ldrb	r0, [r3, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	08003598 	.word	0x08003598
 800301c:	080035b8 	.word	0x080035b8
 8003020:	08003578 	.word	0x08003578

08003024 <__swhatbuf_r>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	460e      	mov	r6, r1
 8003028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800302c:	2900      	cmp	r1, #0
 800302e:	b096      	sub	sp, #88	; 0x58
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	da07      	bge.n	8003046 <__swhatbuf_r+0x22>
 8003036:	2300      	movs	r3, #0
 8003038:	602b      	str	r3, [r5, #0]
 800303a:	89b3      	ldrh	r3, [r6, #12]
 800303c:	061a      	lsls	r2, r3, #24
 800303e:	d410      	bmi.n	8003062 <__swhatbuf_r+0x3e>
 8003040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003044:	e00e      	b.n	8003064 <__swhatbuf_r+0x40>
 8003046:	466a      	mov	r2, sp
 8003048:	f000 f9a2 	bl	8003390 <_fstat_r>
 800304c:	2800      	cmp	r0, #0
 800304e:	dbf2      	blt.n	8003036 <__swhatbuf_r+0x12>
 8003050:	9a01      	ldr	r2, [sp, #4]
 8003052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800305a:	425a      	negs	r2, r3
 800305c:	415a      	adcs	r2, r3
 800305e:	602a      	str	r2, [r5, #0]
 8003060:	e7ee      	b.n	8003040 <__swhatbuf_r+0x1c>
 8003062:	2340      	movs	r3, #64	; 0x40
 8003064:	2000      	movs	r0, #0
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	b016      	add	sp, #88	; 0x58
 800306a:	bd70      	pop	{r4, r5, r6, pc}

0800306c <__smakebuf_r>:
 800306c:	898b      	ldrh	r3, [r1, #12]
 800306e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003070:	079d      	lsls	r5, r3, #30
 8003072:	4606      	mov	r6, r0
 8003074:	460c      	mov	r4, r1
 8003076:	d507      	bpl.n	8003088 <__smakebuf_r+0x1c>
 8003078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	6123      	str	r3, [r4, #16]
 8003080:	2301      	movs	r3, #1
 8003082:	6163      	str	r3, [r4, #20]
 8003084:	b002      	add	sp, #8
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	ab01      	add	r3, sp, #4
 800308a:	466a      	mov	r2, sp
 800308c:	f7ff ffca 	bl	8003024 <__swhatbuf_r>
 8003090:	9900      	ldr	r1, [sp, #0]
 8003092:	4605      	mov	r5, r0
 8003094:	4630      	mov	r0, r6
 8003096:	f000 f87f 	bl	8003198 <_malloc_r>
 800309a:	b948      	cbnz	r0, 80030b0 <__smakebuf_r+0x44>
 800309c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030a0:	059a      	lsls	r2, r3, #22
 80030a2:	d4ef      	bmi.n	8003084 <__smakebuf_r+0x18>
 80030a4:	f023 0303 	bic.w	r3, r3, #3
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	81a3      	strh	r3, [r4, #12]
 80030ae:	e7e3      	b.n	8003078 <__smakebuf_r+0xc>
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <__smakebuf_r+0x7c>)
 80030b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	6020      	str	r0, [r4, #0]
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	9b00      	ldr	r3, [sp, #0]
 80030c0:	6163      	str	r3, [r4, #20]
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	6120      	str	r0, [r4, #16]
 80030c6:	b15b      	cbz	r3, 80030e0 <__smakebuf_r+0x74>
 80030c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f971 	bl	80033b4 <_isatty_r>
 80030d2:	b128      	cbz	r0, 80030e0 <__smakebuf_r+0x74>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	81a3      	strh	r3, [r4, #12]
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	431d      	orrs	r5, r3
 80030e4:	81a5      	strh	r5, [r4, #12]
 80030e6:	e7cd      	b.n	8003084 <__smakebuf_r+0x18>
 80030e8:	08002e49 	.word	0x08002e49

080030ec <malloc>:
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <malloc+0xc>)
 80030ee:	4601      	mov	r1, r0
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	f000 b851 	b.w	8003198 <_malloc_r>
 80030f6:	bf00      	nop
 80030f8:	2000019c 	.word	0x2000019c

080030fc <_free_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4605      	mov	r5, r0
 8003100:	2900      	cmp	r1, #0
 8003102:	d045      	beq.n	8003190 <_free_r+0x94>
 8003104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003108:	1f0c      	subs	r4, r1, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	bfb8      	it	lt
 800310e:	18e4      	addlt	r4, r4, r3
 8003110:	f000 f972 	bl	80033f8 <__malloc_lock>
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <_free_r+0x98>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	4610      	mov	r0, r2
 800311a:	b933      	cbnz	r3, 800312a <_free_r+0x2e>
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	6014      	str	r4, [r2, #0]
 8003120:	4628      	mov	r0, r5
 8003122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003126:	f000 b968 	b.w	80033fa <__malloc_unlock>
 800312a:	42a3      	cmp	r3, r4
 800312c:	d90c      	bls.n	8003148 <_free_r+0x4c>
 800312e:	6821      	ldr	r1, [r4, #0]
 8003130:	1862      	adds	r2, r4, r1
 8003132:	4293      	cmp	r3, r2
 8003134:	bf04      	itt	eq
 8003136:	681a      	ldreq	r2, [r3, #0]
 8003138:	685b      	ldreq	r3, [r3, #4]
 800313a:	6063      	str	r3, [r4, #4]
 800313c:	bf04      	itt	eq
 800313e:	1852      	addeq	r2, r2, r1
 8003140:	6022      	streq	r2, [r4, #0]
 8003142:	6004      	str	r4, [r0, #0]
 8003144:	e7ec      	b.n	8003120 <_free_r+0x24>
 8003146:	4613      	mov	r3, r2
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	b10a      	cbz	r2, 8003150 <_free_r+0x54>
 800314c:	42a2      	cmp	r2, r4
 800314e:	d9fa      	bls.n	8003146 <_free_r+0x4a>
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	1858      	adds	r0, r3, r1
 8003154:	42a0      	cmp	r0, r4
 8003156:	d10b      	bne.n	8003170 <_free_r+0x74>
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	4401      	add	r1, r0
 800315c:	1858      	adds	r0, r3, r1
 800315e:	4282      	cmp	r2, r0
 8003160:	6019      	str	r1, [r3, #0]
 8003162:	d1dd      	bne.n	8003120 <_free_r+0x24>
 8003164:	6810      	ldr	r0, [r2, #0]
 8003166:	6852      	ldr	r2, [r2, #4]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	4401      	add	r1, r0
 800316c:	6019      	str	r1, [r3, #0]
 800316e:	e7d7      	b.n	8003120 <_free_r+0x24>
 8003170:	d902      	bls.n	8003178 <_free_r+0x7c>
 8003172:	230c      	movs	r3, #12
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	e7d3      	b.n	8003120 <_free_r+0x24>
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	1821      	adds	r1, r4, r0
 800317c:	428a      	cmp	r2, r1
 800317e:	bf04      	itt	eq
 8003180:	6811      	ldreq	r1, [r2, #0]
 8003182:	6852      	ldreq	r2, [r2, #4]
 8003184:	6062      	str	r2, [r4, #4]
 8003186:	bf04      	itt	eq
 8003188:	1809      	addeq	r1, r1, r0
 800318a:	6021      	streq	r1, [r4, #0]
 800318c:	605c      	str	r4, [r3, #4]
 800318e:	e7c7      	b.n	8003120 <_free_r+0x24>
 8003190:	bd38      	pop	{r3, r4, r5, pc}
 8003192:	bf00      	nop
 8003194:	20000220 	.word	0x20000220

08003198 <_malloc_r>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	1ccd      	adds	r5, r1, #3
 800319c:	f025 0503 	bic.w	r5, r5, #3
 80031a0:	3508      	adds	r5, #8
 80031a2:	2d0c      	cmp	r5, #12
 80031a4:	bf38      	it	cc
 80031a6:	250c      	movcc	r5, #12
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	4606      	mov	r6, r0
 80031ac:	db01      	blt.n	80031b2 <_malloc_r+0x1a>
 80031ae:	42a9      	cmp	r1, r5
 80031b0:	d903      	bls.n	80031ba <_malloc_r+0x22>
 80031b2:	230c      	movs	r3, #12
 80031b4:	6033      	str	r3, [r6, #0]
 80031b6:	2000      	movs	r0, #0
 80031b8:	bd70      	pop	{r4, r5, r6, pc}
 80031ba:	f000 f91d 	bl	80033f8 <__malloc_lock>
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <_malloc_r+0xac>)
 80031c0:	6814      	ldr	r4, [r2, #0]
 80031c2:	4621      	mov	r1, r4
 80031c4:	b991      	cbnz	r1, 80031ec <_malloc_r+0x54>
 80031c6:	4c20      	ldr	r4, [pc, #128]	; (8003248 <_malloc_r+0xb0>)
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	b91b      	cbnz	r3, 80031d4 <_malloc_r+0x3c>
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f869 	bl	80032a4 <_sbrk_r>
 80031d2:	6020      	str	r0, [r4, #0]
 80031d4:	4629      	mov	r1, r5
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f864 	bl	80032a4 <_sbrk_r>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d124      	bne.n	800322a <_malloc_r+0x92>
 80031e0:	230c      	movs	r3, #12
 80031e2:	6033      	str	r3, [r6, #0]
 80031e4:	4630      	mov	r0, r6
 80031e6:	f000 f908 	bl	80033fa <__malloc_unlock>
 80031ea:	e7e4      	b.n	80031b6 <_malloc_r+0x1e>
 80031ec:	680b      	ldr	r3, [r1, #0]
 80031ee:	1b5b      	subs	r3, r3, r5
 80031f0:	d418      	bmi.n	8003224 <_malloc_r+0x8c>
 80031f2:	2b0b      	cmp	r3, #11
 80031f4:	d90f      	bls.n	8003216 <_malloc_r+0x7e>
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	50cd      	str	r5, [r1, r3]
 80031fa:	18cc      	adds	r4, r1, r3
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f8fc 	bl	80033fa <__malloc_unlock>
 8003202:	f104 000b 	add.w	r0, r4, #11
 8003206:	1d23      	adds	r3, r4, #4
 8003208:	f020 0007 	bic.w	r0, r0, #7
 800320c:	1ac3      	subs	r3, r0, r3
 800320e:	d0d3      	beq.n	80031b8 <_malloc_r+0x20>
 8003210:	425a      	negs	r2, r3
 8003212:	50e2      	str	r2, [r4, r3]
 8003214:	e7d0      	b.n	80031b8 <_malloc_r+0x20>
 8003216:	428c      	cmp	r4, r1
 8003218:	684b      	ldr	r3, [r1, #4]
 800321a:	bf16      	itet	ne
 800321c:	6063      	strne	r3, [r4, #4]
 800321e:	6013      	streq	r3, [r2, #0]
 8003220:	460c      	movne	r4, r1
 8003222:	e7eb      	b.n	80031fc <_malloc_r+0x64>
 8003224:	460c      	mov	r4, r1
 8003226:	6849      	ldr	r1, [r1, #4]
 8003228:	e7cc      	b.n	80031c4 <_malloc_r+0x2c>
 800322a:	1cc4      	adds	r4, r0, #3
 800322c:	f024 0403 	bic.w	r4, r4, #3
 8003230:	42a0      	cmp	r0, r4
 8003232:	d005      	beq.n	8003240 <_malloc_r+0xa8>
 8003234:	1a21      	subs	r1, r4, r0
 8003236:	4630      	mov	r0, r6
 8003238:	f000 f834 	bl	80032a4 <_sbrk_r>
 800323c:	3001      	adds	r0, #1
 800323e:	d0cf      	beq.n	80031e0 <_malloc_r+0x48>
 8003240:	6025      	str	r5, [r4, #0]
 8003242:	e7db      	b.n	80031fc <_malloc_r+0x64>
 8003244:	20000220 	.word	0x20000220
 8003248:	20000224 	.word	0x20000224

0800324c <__srget_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	460c      	mov	r4, r1
 8003250:	4605      	mov	r5, r0
 8003252:	b118      	cbz	r0, 800325c <__srget_r+0x10>
 8003254:	6983      	ldr	r3, [r0, #24]
 8003256:	b90b      	cbnz	r3, 800325c <__srget_r+0x10>
 8003258:	f7ff fe12 	bl	8002e80 <__sinit>
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <__srget_r+0x4c>)
 800325e:	429c      	cmp	r4, r3
 8003260:	d10d      	bne.n	800327e <__srget_r+0x32>
 8003262:	686c      	ldr	r4, [r5, #4]
 8003264:	4621      	mov	r1, r4
 8003266:	4628      	mov	r0, r5
 8003268:	f000 f8e4 	bl	8003434 <__srefill_r>
 800326c:	b988      	cbnz	r0, 8003292 <__srget_r+0x46>
 800326e:	6863      	ldr	r3, [r4, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	6063      	str	r3, [r4, #4]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	6022      	str	r2, [r4, #0]
 800327a:	7818      	ldrb	r0, [r3, #0]
 800327c:	bd38      	pop	{r3, r4, r5, pc}
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <__srget_r+0x50>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d101      	bne.n	8003288 <__srget_r+0x3c>
 8003284:	68ac      	ldr	r4, [r5, #8]
 8003286:	e7ed      	b.n	8003264 <__srget_r+0x18>
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <__srget_r+0x54>)
 800328a:	429c      	cmp	r4, r3
 800328c:	bf08      	it	eq
 800328e:	68ec      	ldreq	r4, [r5, #12]
 8003290:	e7e8      	b.n	8003264 <__srget_r+0x18>
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	e7f1      	b.n	800327c <__srget_r+0x30>
 8003298:	08003598 	.word	0x08003598
 800329c:	080035b8 	.word	0x080035b8
 80032a0:	08003578 	.word	0x08003578

080032a4 <_sbrk_r>:
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	4c06      	ldr	r4, [pc, #24]	; (80032c0 <_sbrk_r+0x1c>)
 80032a8:	2300      	movs	r3, #0
 80032aa:	4605      	mov	r5, r0
 80032ac:	4608      	mov	r0, r1
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	f7ff faac 	bl	800280c <_sbrk>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_sbrk_r+0x1a>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	b103      	cbz	r3, 80032be <_sbrk_r+0x1a>
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	200002ac 	.word	0x200002ac

080032c4 <__sread>:
 80032c4:	b510      	push	{r4, lr}
 80032c6:	460c      	mov	r4, r1
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	f000 f896 	bl	80033fc <_read_r>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	bfab      	itete	ge
 80032d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032d6:	89a3      	ldrhlt	r3, [r4, #12]
 80032d8:	181b      	addge	r3, r3, r0
 80032da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032de:	bfac      	ite	ge
 80032e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80032e2:	81a3      	strhlt	r3, [r4, #12]
 80032e4:	bd10      	pop	{r4, pc}

080032e6 <__swrite>:
 80032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	461f      	mov	r7, r3
 80032ec:	898b      	ldrh	r3, [r1, #12]
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	4605      	mov	r5, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4616      	mov	r6, r2
 80032f6:	d505      	bpl.n	8003304 <__swrite+0x1e>
 80032f8:	2302      	movs	r3, #2
 80032fa:	2200      	movs	r2, #0
 80032fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003300:	f000 f868 	bl	80033d4 <_lseek_r>
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	4632      	mov	r2, r6
 8003312:	463b      	mov	r3, r7
 8003314:	4628      	mov	r0, r5
 8003316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800331a:	f000 b817 	b.w	800334c <_write_r>

0800331e <__sseek>:
 800331e:	b510      	push	{r4, lr}
 8003320:	460c      	mov	r4, r1
 8003322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003326:	f000 f855 	bl	80033d4 <_lseek_r>
 800332a:	1c43      	adds	r3, r0, #1
 800332c:	89a3      	ldrh	r3, [r4, #12]
 800332e:	bf15      	itete	ne
 8003330:	6560      	strne	r0, [r4, #84]	; 0x54
 8003332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800333a:	81a3      	strheq	r3, [r4, #12]
 800333c:	bf18      	it	ne
 800333e:	81a3      	strhne	r3, [r4, #12]
 8003340:	bd10      	pop	{r4, pc}

08003342 <__sclose>:
 8003342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003346:	f000 b813 	b.w	8003370 <_close_r>
	...

0800334c <_write_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4c07      	ldr	r4, [pc, #28]	; (800336c <_write_r+0x20>)
 8003350:	4605      	mov	r5, r0
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	2200      	movs	r2, #0
 8003358:	6022      	str	r2, [r4, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f7ff fac1 	bl	80028e2 <_write>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_write_r+0x1e>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	b103      	cbz	r3, 800336a <_write_r+0x1e>
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	200002ac 	.word	0x200002ac

08003370 <_close_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4c06      	ldr	r4, [pc, #24]	; (800338c <_close_r+0x1c>)
 8003374:	2300      	movs	r3, #0
 8003376:	4605      	mov	r5, r0
 8003378:	4608      	mov	r0, r1
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	f7ff fa12 	bl	80027a4 <_close>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_close_r+0x1a>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	b103      	cbz	r3, 800338a <_close_r+0x1a>
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	200002ac 	.word	0x200002ac

08003390 <_fstat_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4c07      	ldr	r4, [pc, #28]	; (80033b0 <_fstat_r+0x20>)
 8003394:	2300      	movs	r3, #0
 8003396:	4605      	mov	r5, r0
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	f7ff fa0d 	bl	80027bc <_fstat>
 80033a2:	1c43      	adds	r3, r0, #1
 80033a4:	d102      	bne.n	80033ac <_fstat_r+0x1c>
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	b103      	cbz	r3, 80033ac <_fstat_r+0x1c>
 80033aa:	602b      	str	r3, [r5, #0]
 80033ac:	bd38      	pop	{r3, r4, r5, pc}
 80033ae:	bf00      	nop
 80033b0:	200002ac 	.word	0x200002ac

080033b4 <_isatty_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4c06      	ldr	r4, [pc, #24]	; (80033d0 <_isatty_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4605      	mov	r5, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	f7ff fa0c 	bl	80027dc <_isatty>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_isatty_r+0x1a>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_isatty_r+0x1a>
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	200002ac 	.word	0x200002ac

080033d4 <_lseek_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4c07      	ldr	r4, [pc, #28]	; (80033f4 <_lseek_r+0x20>)
 80033d8:	4605      	mov	r5, r0
 80033da:	4608      	mov	r0, r1
 80033dc:	4611      	mov	r1, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	6022      	str	r2, [r4, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7ff fa05 	bl	80027f2 <_lseek>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_lseek_r+0x1e>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_lseek_r+0x1e>
 80033f0:	602b      	str	r3, [r5, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	200002ac 	.word	0x200002ac

080033f8 <__malloc_lock>:
 80033f8:	4770      	bx	lr

080033fa <__malloc_unlock>:
 80033fa:	4770      	bx	lr

080033fc <_read_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4c07      	ldr	r4, [pc, #28]	; (800341c <_read_r+0x20>)
 8003400:	4605      	mov	r5, r0
 8003402:	4608      	mov	r0, r1
 8003404:	4611      	mov	r1, r2
 8003406:	2200      	movs	r2, #0
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff fa40 	bl	8002890 <_read>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d102      	bne.n	800341a <_read_r+0x1e>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	b103      	cbz	r3, 800341a <_read_r+0x1e>
 8003418:	602b      	str	r3, [r5, #0]
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	200002ac 	.word	0x200002ac

08003420 <lflush>:
 8003420:	8983      	ldrh	r3, [r0, #12]
 8003422:	f003 0309 	and.w	r3, r3, #9
 8003426:	2b09      	cmp	r3, #9
 8003428:	d101      	bne.n	800342e <lflush+0xe>
 800342a:	f7ff bcd7 	b.w	8002ddc <fflush>
 800342e:	2000      	movs	r0, #0
 8003430:	4770      	bx	lr
	...

08003434 <__srefill_r>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	460c      	mov	r4, r1
 8003438:	4605      	mov	r5, r0
 800343a:	b118      	cbz	r0, 8003444 <__srefill_r+0x10>
 800343c:	6983      	ldr	r3, [r0, #24]
 800343e:	b90b      	cbnz	r3, 8003444 <__srefill_r+0x10>
 8003440:	f7ff fd1e 	bl	8002e80 <__sinit>
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <__srefill_r+0x104>)
 8003446:	429c      	cmp	r4, r3
 8003448:	d10a      	bne.n	8003460 <__srefill_r+0x2c>
 800344a:	686c      	ldr	r4, [r5, #4]
 800344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003450:	2300      	movs	r3, #0
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	b293      	uxth	r3, r2
 8003456:	069e      	lsls	r6, r3, #26
 8003458:	d50c      	bpl.n	8003474 <__srefill_r+0x40>
 800345a:	f04f 30ff 	mov.w	r0, #4294967295
 800345e:	e067      	b.n	8003530 <__srefill_r+0xfc>
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <__srefill_r+0x108>)
 8003462:	429c      	cmp	r4, r3
 8003464:	d101      	bne.n	800346a <__srefill_r+0x36>
 8003466:	68ac      	ldr	r4, [r5, #8]
 8003468:	e7f0      	b.n	800344c <__srefill_r+0x18>
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <__srefill_r+0x10c>)
 800346c:	429c      	cmp	r4, r3
 800346e:	bf08      	it	eq
 8003470:	68ec      	ldreq	r4, [r5, #12]
 8003472:	e7eb      	b.n	800344c <__srefill_r+0x18>
 8003474:	0758      	lsls	r0, r3, #29
 8003476:	d449      	bmi.n	800350c <__srefill_r+0xd8>
 8003478:	06d9      	lsls	r1, r3, #27
 800347a:	d405      	bmi.n	8003488 <__srefill_r+0x54>
 800347c:	2309      	movs	r3, #9
 800347e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	81a2      	strh	r2, [r4, #12]
 8003486:	e7e8      	b.n	800345a <__srefill_r+0x26>
 8003488:	071a      	lsls	r2, r3, #28
 800348a:	d50b      	bpl.n	80034a4 <__srefill_r+0x70>
 800348c:	4621      	mov	r1, r4
 800348e:	4628      	mov	r0, r5
 8003490:	f7ff fc7a 	bl	8002d88 <_fflush_r>
 8003494:	2800      	cmp	r0, #0
 8003496:	d1e0      	bne.n	800345a <__srefill_r+0x26>
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	60a0      	str	r0, [r4, #8]
 800349c:	f023 0308 	bic.w	r3, r3, #8
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	61a0      	str	r0, [r4, #24]
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	b91b      	cbnz	r3, 80034b8 <__srefill_r+0x84>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f7ff fdda 	bl	800306c <__smakebuf_r>
 80034b8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80034bc:	b2be      	uxth	r6, r7
 80034be:	07b3      	lsls	r3, r6, #30
 80034c0:	d00f      	beq.n	80034e2 <__srefill_r+0xae>
 80034c2:	2301      	movs	r3, #1
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <__srefill_r+0x110>)
 80034c8:	491f      	ldr	r1, [pc, #124]	; (8003548 <__srefill_r+0x114>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	f006 0609 	and.w	r6, r6, #9
 80034d0:	f7ff fd42 	bl	8002f58 <_fwalk>
 80034d4:	2e09      	cmp	r6, #9
 80034d6:	81a7      	strh	r7, [r4, #12]
 80034d8:	d103      	bne.n	80034e2 <__srefill_r+0xae>
 80034da:	4621      	mov	r1, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f7ff fbcd 	bl	8002c7c <__sflush_r>
 80034e2:	6922      	ldr	r2, [r4, #16]
 80034e4:	6022      	str	r2, [r4, #0]
 80034e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80034e8:	6963      	ldr	r3, [r4, #20]
 80034ea:	6a21      	ldr	r1, [r4, #32]
 80034ec:	4628      	mov	r0, r5
 80034ee:	47b0      	blx	r6
 80034f0:	2800      	cmp	r0, #0
 80034f2:	6060      	str	r0, [r4, #4]
 80034f4:	dc1d      	bgt.n	8003532 <__srefill_r+0xfe>
 80034f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034fa:	bf17      	itett	ne
 80034fc:	2200      	movne	r2, #0
 80034fe:	f043 0320 	orreq.w	r3, r3, #32
 8003502:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003506:	6062      	strne	r2, [r4, #4]
 8003508:	81a3      	strh	r3, [r4, #12]
 800350a:	e7a6      	b.n	800345a <__srefill_r+0x26>
 800350c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800350e:	2900      	cmp	r1, #0
 8003510:	d0cc      	beq.n	80034ac <__srefill_r+0x78>
 8003512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003516:	4299      	cmp	r1, r3
 8003518:	d002      	beq.n	8003520 <__srefill_r+0xec>
 800351a:	4628      	mov	r0, r5
 800351c:	f7ff fdee 	bl	80030fc <_free_r>
 8003520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003522:	6063      	str	r3, [r4, #4]
 8003524:	2000      	movs	r0, #0
 8003526:	6360      	str	r0, [r4, #52]	; 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0bf      	beq.n	80034ac <__srefill_r+0x78>
 800352c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003532:	2000      	movs	r0, #0
 8003534:	e7fc      	b.n	8003530 <__srefill_r+0xfc>
 8003536:	bf00      	nop
 8003538:	08003598 	.word	0x08003598
 800353c:	080035b8 	.word	0x080035b8
 8003540:	08003578 	.word	0x08003578
 8003544:	08003574 	.word	0x08003574
 8003548:	08003421 	.word	0x08003421

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
