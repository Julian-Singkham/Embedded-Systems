
Lab 6 Electronic lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000818  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009dc  080009dc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009dc  080009dc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080009dc  080009dc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009dc  080009dc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009e0  080009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080009e4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000006c  08000a50  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000a50  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000413  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00000106  00000000  00000000  000204af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000008a  00000000  00000000  000205b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000e8  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000000bb  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000207e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  0000002c  00000000  00000000  00020808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009c4 	.word	0x080009c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	080009c4 	.word	0x080009c4

08000204 <num_to_ascii>:

#convert a binary number to ascii
#r1: input  = binary number to convert
#r0: output = ascii value
num_to_ascii:
	push {r1, lr}
 8000204:	b502      	push	{r1, lr}
	bl   num_to_bcd
 8000206:	f000 f804 	bl	8000212 <num_to_bcd>
	mov  r1, r0
 800020a:	4601      	mov	r1, r0
	bl   bcd_to_ascii
 800020c:	f000 f834 	bl	8000278 <bcd_to_ascii>
	pop  {r1, pc}
 8000210:	bd02      	pop	{r1, pc}

08000212 <num_to_bcd>:
#Convert number to BCD
#r1: input  = binary number to convert
#r0: output = BCD Value
num_to_bcd:
#Double Dabble
	push {r1, r11-r12, lr}
 8000212:	e92d 5802 	stmdb	sp!, {r1, fp, ip, lr}
    mov r0, #0
 8000216:	f04f 0000 	mov.w	r0, #0
    mov r11, #16
 800021a:	f04f 0b10 	mov.w	fp, #16
    bfc r1, #15, #16 //Remove excess bits
 800021e:	f36f 31de 	bfc	r1, #15, #16
1:
    #Once complete exit
    cmp r11, #0
 8000222:	f1bb 0f00 	cmp.w	fp, #0
    beq 2f
 8000226:	d025      	beq.n	8000274 <num_to_bcd+0x62>

    #check if each nibble is greater than 4, if it is add 3
    ubfx r12, r0, #0, #4 //fourth nibble
 8000228:	f3c0 0c03 	ubfx	ip, r0, #0, #4
    cmp r12, #4
 800022c:	f1bc 0f04 	cmp.w	ip, #4
    IT gt
 8000230:	bfc8      	it	gt
    addgt r0, r0, #3
 8000232:	3003      	addgt	r0, #3
    
    ubfx r12, r0, #4, #4 //third nibble
 8000234:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    cmp r12, #4
 8000238:	f1bc 0f04 	cmp.w	ip, #4
    IT gt
 800023c:	bfc8      	it	gt
    addgt r0, r0, #48
 800023e:	3030      	addgt	r0, #48	; 0x30

    ubfx r12, r0, #8, #4 //second nibble
 8000240:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    cmp r12, #4
 8000244:	f1bc 0f04 	cmp.w	ip, #4
    IT gt
 8000248:	bfc8      	it	gt
    addgt r0, r0, #768
 800024a:	f500 7040 	addgt.w	r0, r0, #768	; 0x300

    ubfx r12, r0, #12, #4 //first nibble
 800024e:	f3c0 3c03 	ubfx	ip, r0, #12, #4
    cmp r12, #4
 8000252:	f1bc 0f04 	cmp.w	ip, #4
    IT gt
 8000256:	bfc8      	it	gt
    addgt r0, r0, #12288
 8000258:	f500 5040 	addgt.w	r0, r0, #12288	; 0x3000

    #shift left and add the next bit
    lsl r0, r0, #1
 800025c:	ea4f 0040 	mov.w	r0, r0, lsl #1
    mov r12, #0
 8000260:	f04f 0c00 	mov.w	ip, #0
    ubfx r12, r1, #15, #1
 8000264:	f3c1 3cc0 	ubfx	ip, r1, #15, #1
    add r0, r0, r12
 8000268:	4460      	add	r0, ip
    lsl r1, r1, #1
 800026a:	ea4f 0141 	mov.w	r1, r1, lsl #1
    sub r11, #1
 800026e:	f1ab 0b01 	sub.w	fp, fp, #1
    b 1b
 8000272:	e7d6      	b.n	8000222 <num_to_bcd+0x10>
2:
    pop {r1, r11-r12, pc}
 8000274:	e8bd 9802 	ldmia.w	sp!, {r1, fp, ip, pc}

08000278 <bcd_to_ascii>:

#Convert the BCD to ASCII
#r1: input  = BCD value to convert
#r0: output = ascii value
bcd_to_ascii:
	push {r1-r2, lr}
 8000278:	b506      	push	{r1, r2, lr}
	#lsr r12, r2, #16
	#cmp r12, r1
	#ldr R0, =ASCII_ERR
	#bne 1f

	mov R0, #0x30303030
 800027a:	f04f 3030 	mov.w	r0, #808464432	; 0x30303030
    #Convert each nibble to ASCII
	ubfx r12, r1, #12, #4
 800027e:	f3c1 3c03 	ubfx	ip, r1, #12, #4
	bfi  r0, r12, #24, #4
 8000282:	f36c 601b 	bfi	r0, ip, #24, #4

	ubfx r12, r1, #8, #4
 8000286:	f3c1 2c03 	ubfx	ip, r1, #8, #4
	bfi  r0, r12, #16, #4
 800028a:	f36c 4013 	bfi	r0, ip, #16, #4

	ubfx r12, r1, #4, #4
 800028e:	f3c1 1c03 	ubfx	ip, r1, #4, #4
	bfi  r0, r12, #8, #4
 8000292:	f36c 200b 	bfi	r0, ip, #8, #4

	ubfx r12, r1, #0, #4
 8000296:	f3c1 0c03 	ubfx	ip, r1, #0, #4
	bfi  r0, r12, #0, #4
 800029a:	f36c 0003 	bfi	r0, ip, #0, #4

1:
	pop  {r1-r2, PC}
 800029e:	bd06      	pop	{r1, r2, pc}

080002a0 <led_setup>:
.global led_setup
.global led_turn_on
.global led_turn_off

led_setup:
	push {r10-r12, lr}
 80002a0:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
	#Turn on GPIOB in RCC
	ldr r12, =RCC_BASE
 80002a4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8000314 <led_turn_off+0x1c>

	ldr r11, [r12, #RCC_AHB1ENR]
 80002a8:	f8dc b030 	ldr.w	fp, [ip, #48]	; 0x30
	orr r11, r11, #RCC_GPIOBEN
 80002ac:	f04b 0b02 	orr.w	fp, fp, #2
	str r11, [r12, #RCC_AHB1ENR]
 80002b0:	f8cc b030 	str.w	fp, [ip, #48]	; 0x30

	#Enable PB5-PB10, PB12-PB15 to be outputs

	ldr r12, =GPIOB_BASE
 80002b4:	f8df c060 	ldr.w	ip, [pc, #96]	; 8000318 <led_turn_off+0x20>
	ldr r11, [r12, #GPIO_MODER]
 80002b8:	f8dc b000 	ldr.w	fp, [ip]

	movw r10, #0x5400
 80002bc:	f245 4a00 	movw	sl, #21504	; 0x5400
	movt r10, #0x5515
 80002c0:	f2c5 5a15 	movt	sl, #21781	; 0x5515
	orr r11, r11, r10
 80002c4:	ea4b 0b0a 	orr.w	fp, fp, sl

	movw r10, #0xA800
 80002c8:	f64a 0a00 	movw	sl, #43008	; 0xa800
	movt r10, #0xAA2A
 80002cc:	f6ca 2a2a 	movt	sl, #43562	; 0xaa2a
	bic r11, r11, r10
 80002d0:	ea2b 0b0a 	bic.w	fp, fp, sl

	str r11, [r12, #GPIO_MODER]
 80002d4:	f8cc b000 	str.w	fp, [ip]
	
	pop {r10-r12, pc}
 80002d8:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

080002dc <led_turn_on>:

led_turn_on:
	push {r10-r12, lr}
 80002dc:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
	ldr r12, =GPIOB_BASE
 80002e0:	f8df c034 	ldr.w	ip, [pc, #52]	; 8000318 <led_turn_off+0x20>
	ldr r11, [r12, #GPIO_ODR]
 80002e4:	f8dc b014 	ldr.w	fp, [ip, #20]
	movw r10, #0xF7E0
 80002e8:	f24f 7ae0 	movw	sl, #63456	; 0xf7e0
	orr r11, r11, r10
 80002ec:	ea4b 0b0a 	orr.w	fp, fp, sl
	str r11, [r12, #GPIO_ODR]
 80002f0:	f8cc b014 	str.w	fp, [ip, #20]
	pop {r10-r12, pc}
 80002f4:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

080002f8 <led_turn_off>:

led_turn_off:
	push {r10-r12, lr}
 80002f8:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
	ldr r12, =GPIOB_BASE
 80002fc:	f8df c018 	ldr.w	ip, [pc, #24]	; 8000318 <led_turn_off+0x20>
	ldr r11, [r12, #GPIO_ODR]
 8000300:	f8dc b014 	ldr.w	fp, [ip, #20]
	movw r10, #0xF7E0
 8000304:	f24f 7ae0 	movw	sl, #63456	; 0xf7e0
	bic r11, r11, r10
 8000308:	ea2b 0b0a 	bic.w	fp, fp, sl
	str r11, [r12, #GPIO_ODR]
 800030c:	f8cc b014 	str.w	fp, [ip, #20]
	pop {r10-r12, pc}
 8000310:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}
	ldr r12, =RCC_BASE
 8000314:	40023800 	.word	0x40023800
	ldr r12, =GPIOB_BASE
 8000318:	40020400 	.word	0x40020400

0800031c <lcd_init>:
#r11: internal = Temp 2
#r12: internal = Temp 1

#Code to initialize the LCD
lcd_init:
	push {r1, r11, r12, lr}
 800031c:	e92d 5802 	stmdb	sp!, {r1, fp, ip, lr}
	bl setup_ports
 8000320:	f000 f81d 	bl	800035e <setup_ports>

	ldr r12, =INITIALIZE_DELAY
 8000324:	f8df c23c 	ldr.w	ip, [pc, #572]	; 8000564 <error+0x20>
1:  //Wait 40ms
    subs r12, r12, #1
 8000328:	f1bc 0c01 	subs.w	ip, ip, #1
    bne 1b
 800032c:	d1fc      	bne.n	8000328 <lcd_init+0xc>

    #Write Function Set (0x38)
    mov r1, #0x38
 800032e:	f04f 0138 	mov.w	r1, #56	; 0x38
    bl write_instruction
 8000332:	f000 f8cd 	bl	80004d0 <write_instruction>
    mov r1, #0x38
 8000336:	f04f 0138 	mov.w	r1, #56	; 0x38
    bl write_instruction
 800033a:	f000 f8c9 	bl	80004d0 <write_instruction>

    #Write Display On/Off(0x0F)
    mov r1, #0x0F
 800033e:	f04f 010f 	mov.w	r1, #15
    bl write_instruction
 8000342:	f000 f8c5 	bl	80004d0 <write_instruction>
    bl lcd_delay
 8000346:	f000 f880 	bl	800044a <lcd_delay>

    #Write Display Clear (0x01)
    bl lcd_clear
 800034a:	f000 f825 	bl	8000398 <lcd_clear>
    bl write_instruction
 800034e:	f000 f8bf 	bl	80004d0 <write_instruction>

    #Write Entry Mode Set (0x06)
    mov r1, #0x06
 8000352:	f04f 0106 	mov.w	r1, #6
    bl write_instruction
 8000356:	f000 f8bb 	bl	80004d0 <write_instruction>

	pop {r1, r11, r12, pc}
 800035a:	e8bd 9802 	ldmia.w	sp!, {r1, fp, ip, pc}

0800035e <setup_ports>:

setup_ports:
	 #Set up Ports
    ldr r12, =RCC_BASE
 800035e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8000568 <error+0x24>
	ldr r11, [r12, #RCC_AHB1ENR]
 8000362:	f8dc b030 	ldr.w	fp, [ip, #48]	; 0x30
	orr r11, r11, #RCC_GPIOAEN
 8000366:	f04b 0b01 	orr.w	fp, fp, #1
	str r11, [r12, #RCC_AHB1ENR]
 800036a:	f8cc b030 	str.w	fp, [ip, #48]	; 0x30

	#Turn GPIOA to output
	ldr r12, =GPIOA_BASE
 800036e:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 800056c <error+0x28>
	ldr r11, [r12, #GPIO_MODER]
 8000372:	f8dc b000 	ldr.w	fp, [ip]
	ldr r10, =0x00555500
 8000376:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000570 <error+0x2c>
	orr r11, r11, r10
 800037a:	ea4b 0b0a 	orr.w	fp, fp, sl
	str r11, [r12, #GPIO_MODER]
 800037e:	f8cc b000 	str.w	fp, [ip]

	#Turn GPIOC to output
	ldr r12, =GPIOC_BASE
 8000382:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 8000574 <error+0x30>
	ldr r11, [r12, #GPIO_MODER]
 8000386:	f8dc b000 	ldr.w	fp, [ip]
	ldr r10, =0x00150000
 800038a:	f44f 1aa8 	mov.w	sl, #1376256	; 0x150000
	orr r11, r11, r10
 800038e:	ea4b 0b0a 	orr.w	fp, fp, sl
	str r11, [r12, #GPIO_MODER]
 8000392:	f8cc b000 	str.w	fp, [ip]

	bx lr
 8000396:	4770      	bx	lr

08000398 <lcd_clear>:

#Clear the LCD Display
lcd_clear:
    push {r1, lr}
 8000398:	b502      	push	{r1, lr}
    ldr r1, =0x1
 800039a:	f04f 0101 	mov.w	r1, #1
    bl write_instruction
 800039e:	f000 f897 	bl	80004d0 <write_instruction>
    bl lcd_delay
 80003a2:	f000 f852 	bl	800044a <lcd_delay>
    pop {r1, pc}
 80003a6:	bd02      	pop	{r1, pc}

080003a8 <lcd_home>:

#Moves the curser back to home (Upper left hand corner)
lcd_home:
    push {r1, lr}
 80003a8:	b502      	push	{r1, lr}
    mov r1, #0x02
 80003aa:	f04f 0102 	mov.w	r1, #2
    bl write_instruction
 80003ae:	f000 f88f 	bl	80004d0 <write_instruction>
    bl lcd_delay
 80003b2:	f000 f84a 	bl	800044a <lcd_delay>
    pop {r1, pc}
 80003b6:	bd02      	pop	{r1, pc}

080003b8 <lcd_print_num>:

#Prints a decimal number to the display
#Can only print number between 0 and 9999
#r1 = binary number to print
lcd_print_num:
    push {r1, r12, lr}
 80003b8:	e92d 5002 	stmdb	sp!, {r1, ip, lr}
	#check if the values are not within range 0-9999
	cmp r1, #0
 80003bc:	2900      	cmp	r1, #0
    bmi error
 80003be:	f100 80c1 	bmi.w	8000544 <error>
    ldr r12, =MAX_VALUE
 80003c2:	f242 7c0f 	movw	ip, #9999	; 0x270f
    cmp r1, r12
 80003c6:	4561      	cmp	r1, ip
    bgt error
 80003c8:	f300 80bc 	bgt.w	8000544 <error>

	bl num_to_ascii
 80003cc:	f7ff ff1a 	bl	8000204 <num_to_ascii>
	ubfx r1, r0, #24, #8
 80003d0:	f3c0 6107 	ubfx	r1, r0, #24, #8
	bl lcd_write_data
 80003d4:	f000 f898 	bl	8000508 <lcd_write_data>

	ubfx r1, r0, #16, #8
 80003d8:	f3c0 4107 	ubfx	r1, r0, #16, #8
	bl lcd_write_data
 80003dc:	f000 f894 	bl	8000508 <lcd_write_data>

	ubfx r1, r0, #8, #8
 80003e0:	f3c0 2107 	ubfx	r1, r0, #8, #8
	bl lcd_write_data
 80003e4:	f000 f890 	bl	8000508 <lcd_write_data>

	ubfx r1, r0, #0, #8
 80003e8:	f3c0 0107 	ubfx	r1, r0, #0, #8
	bl lcd_write_data
 80003ec:	f000 f88c 	bl	8000508 <lcd_write_data>

	pop {r1, r12, pc}
 80003f0:	e8bd 9002 	ldmia.w	sp!, {r1, ip, pc}

080003f4 <lcd_print_string>:

# Prints a null terminated string to the display
# r1: input  = address to the string
# r0: output = number of characters written
lcd_print_string:
    push {r1, r11-r12, lr}
 80003f4:	e92d 5802 	stmdb	sp!, {r1, fp, ip, lr}

	mov r0, #0 // counter
 80003f8:	f04f 0000 	mov.w	r0, #0
	mov r12, r1 // base address
 80003fc:	468c      	mov	ip, r1
	mov r11, #0 // offset
 80003fe:	f04f 0b00 	mov.w	fp, #0

08000402 <next_byte>:

next_byte:
	ldrb r1, [r12, r11]
 8000402:	f81c 100b 	ldrb.w	r1, [ip, fp]

    #exit if there's no more bytes
	cmp r1, #0
 8000406:	2900      	cmp	r1, #0
	beq 1f
 8000408:	d006      	beq.n	8000418 <next_byte+0x16>

	bl lcd_write_data
 800040a:	f000 f87d 	bl	8000508 <lcd_write_data>
	add r11, r11, #1
 800040e:	f10b 0b01 	add.w	fp, fp, #1
	add r0, r0, #1
 8000412:	f100 0001 	add.w	r0, r0, #1
	b next_byte
 8000416:	e7f4      	b.n	8000402 <next_byte>

1:
	pop  {r1, r11-r12, pc}
 8000418:	e8bd 9802 	ldmia.w	sp!, {r1, fp, ip, pc}

0800041c <lcd_set_position>:

#Moves Cursor to location
#r1: input = row
#r2: input = col
lcd_set_position:
	push {r1-r2, r12, LR}
 800041c:	e92d 5006 	stmdb	sp!, {r1, r2, ip, lr}

	bl lcd_home
 8000420:	f7ff ffc2 	bl	80003a8 <lcd_home>

    #check if the cursor needs to move up/down
	mov r12, r2
 8000424:	4694      	mov	ip, r2
	cmp r1, #0
 8000426:	2900      	cmp	r1, #0
	beq dont_change_line
 8000428:	d001      	beq.n	800042e <dont_change_line>

	# second line starts at 41st digit.
	add r12, r12, #40
 800042a:	f10c 0c28 	add.w	ip, ip, #40	; 0x28

0800042e <dont_change_line>:

dont_change_line:
	cmp r12, #0
 800042e:	f1bc 0f00 	cmp.w	ip, #0
	beq dont_move_cursor
 8000432:	d008      	beq.n	8000446 <dont_move_cursor>

1:
	mov r1, #0x14
 8000434:	f04f 0114 	mov.w	r1, #20
 	bl write_instruction
 8000438:	f000 f84a 	bl	80004d0 <write_instruction>

	bl lcd_delay
 800043c:	f000 f805 	bl	800044a <lcd_delay>

	subs r12, r12, #1
 8000440:	f1bc 0c01 	subs.w	ip, ip, #1
	bne 1b
 8000444:	d1f6      	bne.n	8000434 <dont_change_line+0x6>

08000446 <dont_move_cursor>:

dont_move_cursor:
	pop {r1-r2, r12, PC}
 8000446:	e8bd 9006 	ldmia.w	sp!, {r1, r2, ip, pc}

0800044a <lcd_delay>:


#Delays the program until the busy flag is off
#Could not implement the busy flag delay, a busy wait is used instead.
lcd_delay:
	push {r10-r12, lr}
 800044a:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}

	#Set PA4-11 to input
	ldr r12, =GPIOA_BASE
 800044e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800056c <error+0x28>
	ldr r11, [r12, #GPIO_MODER]
 8000452:	f8dc b000 	ldr.w	fp, [ip]
	mov r10, #0
 8000456:	f04f 0a00 	mov.w	sl, #0
	bfi r11, r10, #8, #16
 800045a:	f36a 2b17 	bfi	fp, sl, #8, #16
	str r11 , [r12, #GPIO_MODER]
 800045e:	f8cc b000 	str.w	fp, [ip]

1: //check busy flag, (DB7/PA11) 0=off
	
	#Set RS=0,RW=1,E=1
	ldr r12, =GPIOC_BASE
 8000462:	f8df c110 	ldr.w	ip, [pc, #272]	; 8000574 <error+0x30>
	ldr r11, [r12, #GPIO_ODR]
 8000466:	f8dc b014 	ldr.w	fp, [ip, #20]
	mov r10, #0b110
 800046a:	f04f 0a06 	mov.w	sl, #6
	bfi r11, r10, #8, #3
 800046e:	f36a 2b0a 	bfi	fp, sl, #8, #3
	str r11, [r12, #GPIO_ODR]
 8000472:	f8cc b014 	str.w	fp, [ip, #20]

	ldr r12, =GPIOA_BASE
 8000476:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800056c <error+0x28>
	ldr r11, [r12, GPIO_IDR]
 800047a:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r10, r11, #11, #1
 800047e:	f3cb 2ac0 	ubfx	sl, fp, #11, #1
	cmp r10, #0
 8000482:	f1ba 0f00 	cmp.w	sl, #0
	beq 2f
 8000486:	d00b      	beq.n	80004a0 <lcd_delay+0x56>

	#Set E= 0
	ldr r12, =GPIOC_BASE
 8000488:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8000574 <error+0x30>
	ldr r11, [r12, #GPIO_ODR]
 800048c:	f8dc b014 	ldr.w	fp, [ip, #20]
	mov r10, #0
 8000490:	f04f 0a00 	mov.w	sl, #0
	bfi r11, r10, #10, #1
 8000494:	f36a 2b8a 	bfi	fp, sl, #10, #1
	str r11, [r12, #GPIO_ODR]
 8000498:	f8cc b014 	str.w	fp, [ip, #20]
	bl 1b
 800049c:	f7ff ffe1 	bl	8000462 <lcd_delay+0x18>

2: //Busy Flag off
	#Set E= 0
	ldr r12, =GPIOC_BASE
 80004a0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8000574 <error+0x30>
	ldr r11, [r12, #GPIO_ODR]
 80004a4:	f8dc b014 	ldr.w	fp, [ip, #20]
	mov r10, #0
 80004a8:	f04f 0a00 	mov.w	sl, #0
	bfi r11, r10, #10, #1
 80004ac:	f36a 2b8a 	bfi	fp, sl, #10, #1
	str r11, [r12, #GPIO_ODR]
 80004b0:	f8cc b014 	str.w	fp, [ip, #20]

	#Turn GPIOA to output
	ldr r12, =GPIOA_BASE
 80004b4:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800056c <error+0x28>
	ldr r11, [r12, #GPIO_MODER]
 80004b8:	f8dc b000 	ldr.w	fp, [ip]
	ldr r10, =0x00555500
 80004bc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8000570 <error+0x2c>
	orr r11, r11, r10
 80004c0:	ea4b 0b0a 	orr.w	fp, fp, sl
	str r11, [r12, #GPIO_MODER]
 80004c4:	f8cc b000 	str.w	fp, [ip]
    pop {r10-r12, pc}
 80004c8:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

080004cc <read_instruction>:

#DID NOT IMPLEMENT
#Reads Instructions
#RS=0 RW=1 
read_instruction:
    push {lr}
 80004cc:	b500      	push	{lr}

    pop {pc}
 80004ce:	bd00      	pop	{pc}

080004d0 <write_instruction>:

#Writes instruction
#r1 = Instruction to write
write_instruction:
	push {r9-r12, LR}
 80004d0:	e92d 5e00 	stmdb	sp!, {r9, sl, fp, ip, lr}
    ldr r12, =GPIOA_BASE
 80004d4:	f8df c094 	ldr.w	ip, [pc, #148]	; 800056c <error+0x28>
    ldr r11, =GPIOC_BASE
 80004d8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8000574 <error+0x30>

	#Set RS=0,RW=0,E=1
    mov r10, #0
 80004dc:	f04f 0a00 	mov.w	sl, #0
    bic r10, r10, #RS
 80004e0:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
	bic r10, r10, #RW
 80004e4:	f42a 7a00 	bic.w	sl, sl, #512	; 0x200
	orr r10, r10, #E
 80004e8:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
    str r10, [r11, #GPIO_ODR]
 80004ec:	f8cb a014 	str.w	sl, [fp, #20]

	#Send R1 to data pins
    bfi r9, r1, #4, #8
 80004f0:	f361 190b 	bfi	r9, r1, #4, #8
    str r9, [r12, #GPIO_ODR]
 80004f4:	f8cc 9014 	str.w	r9, [ip, #20]

	#Set E=0
    bic r10, r10, #E
 80004f8:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
	str r10, [r11, #GPIO_ODR]
 80004fc:	f8cb a014 	str.w	sl, [fp, #20]
    bl lcd_delay
 8000500:	f7ff ffa3 	bl	800044a <lcd_delay>
	pop {r9-r12, PC}
 8000504:	e8bd 9e00 	ldmia.w	sp!, {r9, sl, fp, ip, pc}

08000508 <lcd_write_data>:

#Writes data (ascii value) to the cursor location
#r1 = ascii byte to print
lcd_write_data:
    push {r9-r12, LR}
 8000508:	e92d 5e00 	stmdb	sp!, {r9, sl, fp, ip, lr}
	ldr r12, =GPIOA_BASE
 800050c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800056c <error+0x28>
	ldr r11, =GPIOC_BASE
 8000510:	f8df b060 	ldr.w	fp, [pc, #96]	; 8000574 <error+0x30>

	# set RW=0, RS=1 E=1
	mov r10, #0
 8000514:	f04f 0a00 	mov.w	sl, #0
	bic r10, r10, #RW
 8000518:	f42a 7a00 	bic.w	sl, sl, #512	; 0x200
	orr r10, r10, #RS
 800051c:	f44a 7a80 	orr.w	sl, sl, #256	; 0x100
	orr r10, r10, #E
 8000520:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
	str r10, [r11, #GPIO_ODR]
 8000524:	f8cb a014 	str.w	sl, [fp, #20]

	# write data
	ubfx r9, r1, #0, #8
 8000528:	f3c1 0907 	ubfx	r9, r1, #0, #8
	lsl r9, r9, #4
 800052c:	ea4f 1909 	mov.w	r9, r9, lsl #4
	str r9, [r12, #GPIO_ODR]
 8000530:	f8cc 9014 	str.w	r9, [ip, #20]

	# set E=0
	bic r10, r10, #E
 8000534:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
	str r10, [r11, #GPIO_ODR]
 8000538:	f8cb a014 	str.w	sl, [fp, #20]

	bl lcd_delay
 800053c:	f7ff ff85 	bl	800044a <lcd_delay>

	pop  {r9-r12, pc}
 8000540:	e8bd 9e00 	ldmia.w	sp!, {r9, sl, fp, ip, pc}

08000544 <error>:

#Error message
error:
    mov r1, 'E'
 8000544:	f04f 0145 	mov.w	r1, #69	; 0x45
	bl lcd_write_data
 8000548:	f7ff ffde 	bl	8000508 <lcd_write_data>

	mov r1, 'r'
 800054c:	f04f 0172 	mov.w	r1, #114	; 0x72
	bl lcd_write_data
 8000550:	f7ff ffda 	bl	8000508 <lcd_write_data>

	mov r1, 'r'
 8000554:	f04f 0172 	mov.w	r1, #114	; 0x72
	bl lcd_write_data
 8000558:	f7ff ffd6 	bl	8000508 <lcd_write_data>

	mov r0, #0
 800055c:	f04f 0000 	mov.w	r0, #0

	pop {r1, r12, pc}
 8000560:	e8bd 9002 	ldmia.w	sp!, {r1, ip, pc}
	ldr r12, =INITIALIZE_DELAY
 8000564:	000faf00 	.word	0x000faf00
    ldr r12, =RCC_BASE
 8000568:	40023800 	.word	0x40023800
	ldr r12, =GPIOA_BASE
 800056c:	40020000 	.word	0x40020000
	ldr r10, =0x00555500
 8000570:	00555500 	.word	0x00555500
	ldr r12, =GPIOC_BASE
 8000574:	40020800 	.word	0x40020800

08000578 <main>:
#r10 = counter for password digits
#r9  = password input
.global main
main:
 	//bl KeyInt
	bl lcd_init
 8000578:	f7ff fed0 	bl	800031c <lcd_init>
	bl led_setup
 800057c:	f7ff fe90 	bl	80002a0 <led_setup>
	bl piezo_setup
 8000580:	f000 f88a 	bl	8000698 <piezo_setup>
	mov r12, #0 //LCD Col
 8000584:	f04f 0c00 	mov.w	ip, #0
	mov r11, #0 //LCD Row
 8000588:	f04f 0b00 	mov.w	fp, #0

0800058c <start>:

start:
	mov r10, #4 //password is 4 digits
 800058c:	f04f 0a04 	mov.w	sl, #4
	mov r9,  #0
 8000590:	f04f 0900 	mov.w	r9, #0
	ldr r1, =password_msg1
 8000594:	493a      	ldr	r1, [pc, #232]	; (8000680 <check_restart+0xc>)
	bl lcd_print_string
 8000596:	f7ff ff2d 	bl	80003f4 <lcd_print_string>
	bl next_line
 800059a:	f000 f81e 	bl	80005da <next_line>
	ldr r1, =password_msg2
 800059e:	4939      	ldr	r1, [pc, #228]	; (8000684 <check_restart+0x10>)
	bl lcd_print_string
 80005a0:	f7ff ff28 	bl	80003f4 <lcd_print_string>
	mov r12, #12
 80005a4:	f04f 0c0c 	mov.w	ip, #12

1:
	cmp r10, #0
 80005a8:	f1ba 0f00 	cmp.w	sl, #0
	beq check_password
 80005ac:	d02f      	beq.n	800060e <check_password>
	cmp r12, #16 //check to see if the cursor is out of bounds column wise
 80005ae:	f1bc 0f10 	cmp.w	ip, #16
	beq next_line
 80005b2:	d012      	beq.n	80005da <next_line>
	bl KeyGetchar
 80005b4:	f000 f927 	bl	8000806 <KeyGetchar>
	cmp r0, #0
 80005b8:	2800      	cmp	r0, #0
	beq 1b
 80005ba:	d0f5      	beq.n	80005a8 <start+0x1c>

	mov r1, r0
 80005bc:	4601      	mov	r1, r0
	add r9, r0, r9, lsl#8
 80005be:	eb00 2909 	add.w	r9, r0, r9, lsl #8
	bl lcd_write_data
 80005c2:	f7ff ffa1 	bl	8000508 <lcd_write_data>
	add r12, r12, #1
 80005c6:	f10c 0c01 	add.w	ip, ip, #1
	sub r10, r10, #1
 80005ca:	f1aa 0a01 	sub.w	sl, sl, #1
	b 1b
 80005ce:	e7eb      	b.n	80005a8 <start+0x1c>

080005d0 <move_cursor>:

	#KeyScanCOl

move_cursor://Move Cursor
	mov r2, r12
 80005d0:	4662      	mov	r2, ip
	mov r1, r11
 80005d2:	4659      	mov	r1, fp
	bl lcd_set_position
 80005d4:	f7ff ff22 	bl	800041c <lcd_set_position>
	b 1b
 80005d8:	e7e6      	b.n	80005a8 <start+0x1c>

080005da <next_line>:

next_line: //Move to next line
	push {lr}
 80005da:	b500      	push	{lr}
	cmp r11, #1
 80005dc:	f1bb 0f01 	cmp.w	fp, #1
	beq reset_lcd
 80005e0:	d008      	beq.n	80005f4 <reset_lcd>
	mov r11, #1
 80005e2:	f04f 0b01 	mov.w	fp, #1
	mov r12, #0
 80005e6:	f04f 0c00 	mov.w	ip, #0
	mov r2, r12
 80005ea:	4662      	mov	r2, ip
	mov r1, r11
 80005ec:	4659      	mov	r1, fp
	bl lcd_set_position
 80005ee:	f7ff ff15 	bl	800041c <lcd_set_position>
	pop {pc}
 80005f2:	bd00      	pop	{pc}

080005f4 <reset_lcd>:

#Clear the display when there is no more room on the LCD
reset_lcd:
	bl piezo_off
 80005f4:	f000 f874 	bl	80006e0 <piezo_off>
	bl led_turn_off
 80005f8:	f7ff fe7e 	bl	80002f8 <led_turn_off>
	bl lcd_clear
 80005fc:	f7ff fecc 	bl	8000398 <lcd_clear>
	mov r12, #0
 8000600:	f04f 0c00 	mov.w	ip, #0
	mov r11, #0
 8000604:	f04f 0b00 	mov.w	fp, #0
	bl lcd_home
 8000608:	f7ff fece 	bl	80003a8 <lcd_home>
	b start
 800060c:	e7be      	b.n	800058c <start>

0800060e <check_password>:

check_password:
	ldr r10, =code
 800060e:	f8df a078 	ldr.w	sl, [pc, #120]	; 8000688 <check_restart+0x14>
	ldr r10, [r10]
 8000612:	f8da a000 	ldr.w	sl, [sl]
	cmp r9, r10
 8000616:	45d1      	cmp	r9, sl
	bne fail
 8000618:	d117      	bne.n	800064a <fail>
	b sucess
 800061a:	e7ff      	b.n	800061c <sucess>

0800061c <sucess>:

sucess:
	bl lcd_clear
 800061c:	f7ff febc 	bl	8000398 <lcd_clear>
	bl lcd_home
 8000620:	f7ff fec2 	bl	80003a8 <lcd_home>
	mov r11, #0
 8000624:	f04f 0b00 	mov.w	fp, #0
	mov r12, #0
 8000628:	f04f 0c00 	mov.w	ip, #0
	ldr r1, =success_msg
 800062c:	4917      	ldr	r1, [pc, #92]	; (800068c <check_restart+0x18>)
	bl lcd_print_string
 800062e:	f7ff fee1 	bl	80003f4 <lcd_print_string>
	bl next_line
 8000632:	f7ff ffd2 	bl	80005da <next_line>
	ldr r1, =replay_msg
 8000636:	4916      	ldr	r1, [pc, #88]	; (8000690 <check_restart+0x1c>)
	bl lcd_print_string
 8000638:	f7ff fedc 	bl	80003f4 <lcd_print_string>
	ldr r1, =HAPPY_BUZZ
 800063c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
	bl piezo_play
 8000640:	f000 f85a 	bl	80006f8 <piezo_play>
	bl led_turn_on
 8000644:	f7ff fe4a 	bl	80002dc <led_turn_on>
	b check_restart
 8000648:	e014      	b.n	8000674 <check_restart>

0800064a <fail>:

fail:
	bl lcd_clear
 800064a:	f7ff fea5 	bl	8000398 <lcd_clear>
	bl lcd_home
 800064e:	f7ff feab 	bl	80003a8 <lcd_home>
	mov r11, #0
 8000652:	f04f 0b00 	mov.w	fp, #0
	mov r12, #0
 8000656:	f04f 0c00 	mov.w	ip, #0
	ldr r1, =fail_msg
 800065a:	490e      	ldr	r1, [pc, #56]	; (8000694 <check_restart+0x20>)
	bl lcd_print_string
 800065c:	f7ff feca 	bl	80003f4 <lcd_print_string>
	bl next_line
 8000660:	f7ff ffbb 	bl	80005da <next_line>
	ldr r1, =replay_msg
 8000664:	490a      	ldr	r1, [pc, #40]	; (8000690 <check_restart+0x1c>)
	bl lcd_print_string
 8000666:	f7ff fec5 	bl	80003f4 <lcd_print_string>
	ldr r1, =SAD_BUZZ
 800066a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	bl piezo_play
 800066e:	f000 f843 	bl	80006f8 <piezo_play>
	b check_restart
 8000672:	e7ff      	b.n	8000674 <check_restart>

08000674 <check_restart>:

check_restart:
	bl KeyGetchar
 8000674:	f000 f8c7 	bl	8000806 <KeyGetchar>
	cmp r0, '*'
 8000678:	282a      	cmp	r0, #42	; 0x2a
	bne check_restart
 800067a:	d1fb      	bne.n	8000674 <check_restart>
	b reset_lcd
 800067c:	e7ba      	b.n	80005f4 <reset_lcd>
 800067e:	0000      	.short	0x0000
	ldr r1, =password_msg1
 8000680:	20000000 	.word	0x20000000
	ldr r1, =password_msg2
 8000684:	2000000f 	.word	0x2000000f
	ldr r10, =code
 8000688:	20000043 	.word	0x20000043
	ldr r1, =success_msg
 800068c:	20000027 	.word	0x20000027
	ldr r1, =replay_msg
 8000690:	20000036 	.word	0x20000036
	ldr r1, =fail_msg
 8000694:	20000018 	.word	0x20000018

08000698 <piezo_setup>:
.global piezo_play
.global piezo_off

#Activates TIM3 and sets the Pizeo pins
piezo_setup:
	push {r10-r12, lr}
 8000698:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}

	# enable clock to TIM3 
	ldr r12, =RCC_BASE 
 800069c:	f8df c094 	ldr.w	ip, [pc, #148]	; 8000734 <piezo_play+0x3c>
	ldr r11, [r12, RCC_APB1ENR]
 80006a0:	f8dc b040 	ldr.w	fp, [ip, #64]	; 0x40
	orr r11, r11, #0b10 // TIM3 is bit 1 
 80006a4:	f04b 0b02 	orr.w	fp, fp, #2
	str r11, [r12, RCC_APB1ENR] 
 80006a8:	f8cc b040 	str.w	fp, [ip, #64]	; 0x40
	#enable clock to GPIOB
	ldr r11, [r12, RCC_AHB1ENR] 
 80006ac:	f8dc b030 	ldr.w	fp, [ip, #48]	; 0x30
	orr r11, r11, #0b10 // GPIOB is bit 1
 80006b0:	f04b 0b02 	orr.w	fp, fp, #2
	str r11, [r12, RCC_AHB1ENR] 
 80006b4:	f8cc b030 	str.w	fp, [ip, #48]	; 0x30

	# Set AF to 2
	ldr r12, =GPIOB_BASE 
 80006b8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8000738 <piezo_play+0x40>
	ldr r11, [r12, GPIO_AFRL] 
 80006bc:	f8dc b020 	ldr.w	fp, [ip, #32]
	bic r11, r11, #(0b1111<<16)
 80006c0:	f42b 2b70 	bic.w	fp, fp, #983040	; 0xf0000
	orr r11, r11, #(0b0010<<16) // AF 2
 80006c4:	f44b 3b00 	orr.w	fp, fp, #131072	; 0x20000
	str r11, [r12, GPIO_AFRL] 
 80006c8:	f8cc b020 	str.w	fp, [ip, #32]
	# Set PB4 to Alternate mode
	ldr r11, [r12, GPIO_MODER] 
 80006cc:	f8dc b000 	ldr.w	fp, [ip]
	bic r11, r11, #(0b11<<8)
 80006d0:	f42b 7b40 	bic.w	fp, fp, #768	; 0x300
	orr r11, r11, #(0b10<<8)
 80006d4:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
	str r11, [r12, GPIO_MODER]
 80006d8:	f8cc b000 	str.w	fp, [ip]
	
	pop {r10-r12, pc}
 80006dc:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

080006e0 <piezo_off>:

#Disables Pizeo
piezo_off:
	push {r11-r12, lr}
 80006e0:	e92d 5800 	stmdb	sp!, {fp, ip, lr}

	#Disbale counter
	ldr r12, =TIM3_BASE
 80006e4:	f8df c054 	ldr.w	ip, [pc, #84]	; 800073c <piezo_play+0x44>
	ldr r11, [r12, TIMx_CR1]
 80006e8:	f8dc b000 	ldr.w	fp, [ip]
	mov r11, #0
 80006ec:	f04f 0b00 	mov.w	fp, #0
	str r11, [r12, TIMx_CR1]
 80006f0:	f8cc b000 	str.w	fp, [ip]

	pop {r11-r12, pc}
 80006f4:	e8bd 9800 	ldmia.w	sp!, {fp, ip, pc}

080006f8 <piezo_play>:

#Plays a tone with the Piezo
#r1:input = amount of ticks (clock/[r1*2]=hz)
piezo_play:
	push {r11-r12, lr}
 80006f8:	e92d 5800 	stmdb	sp!, {fp, ip, lr}

	ldr r12, =TIM3_BASE
 80006fc:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800073c <piezo_play+0x44>

	#Enable counter
	ldr r11, [r12, TIMx_CR1]
 8000700:	f8dc b000 	ldr.w	fp, [ip]
	mov r11, #1
 8000704:	f04f 0b01 	mov.w	fp, #1
	str r11, [r12, TIMx_CR1]
 8000708:	f8cc b000 	str.w	fp, [ip]

	#set the reset count: period -1
	add r11, r1, r1
 800070c:	eb01 0b01 	add.w	fp, r1, r1
	sub r11, r11, #1
 8000710:	f1ab 0b01 	sub.w	fp, fp, #1
	str r11, [r12,TIMx_ARR]
 8000714:	f8cc b02c 	str.w	fp, [ip, #44]	; 0x2c

	#Set position of toggle
	mov r11, #0
 8000718:	f04f 0b00 	mov.w	fp, #0
	str r11, [r12,TIMx_CCR1]
 800071c:	f8cc b034 	str.w	fp, [ip, #52]	; 0x34

	#Set output mode to toggle
	mov r11, #0b011<<4 // OC1M = 011 - PWM Mode 1
 8000720:	f04f 0b30 	mov.w	fp, #48	; 0x30
	str r11, [r12,TIMx_CCMR1]
 8000724:	f8cc b018 	str.w	fp, [ip, #24]

	# compare output enable 
	movw r11, #1 //CC2E =1
 8000728:	f240 0b01 	movw	fp, #1
	str r11, [r12,TIMx_CCER]
 800072c:	f8cc b020 	str.w	fp, [ip, #32]
	
	pop {r11-r12, pc}
 8000730:	e8bd 9800 	ldmia.w	sp!, {fp, ip, pc}
	ldr r12, =RCC_BASE 
 8000734:	40023800 	.word	0x40023800
	ldr r12, =GPIOB_BASE 
 8000738:	40020400 	.word	0x40020400
	ldr r12, =TIM3_BASE
 800073c:	40000400 	.word	0x40000400

08000740 <KeyInt>:


#Code to initialize the Keypad
KeyInt:
	#Set up Ports
	push {r10-r12, lr}
 8000740:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
    ldr r12, =RCC_BASE
 8000744:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 800091c <delay+0xc>
	ldr r11, [r12, #RCC_AHB1ENR]
 8000748:	f8dc b030 	ldr.w	fp, [ip, #48]	; 0x30
    orr r11, r11, #RCC_GPIOCEN
 800074c:	f04b 0b04 	orr.w	fp, fp, #4
	str r11, [r12, #RCC_AHB1ENR]
 8000750:	f8cc b030 	str.w	fp, [ip, #48]	; 0x30

	ldr r12, =GPIOC_BASE
 8000754:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_PUPDR]
 8000758:	f8dc b00c 	ldr.w	fp, [ip, #12]
	ldr r10, =GPIOC_PULLUP
 800075c:	f245 5a55 	movw	sl, #21845	; 0x5555
	orr r11, r11, r10
 8000760:	ea4b 0b0a 	orr.w	fp, fp, sl
	str r11, [r12, #GPIO_PUPDR]
 8000764:	f8cc b00c 	str.w	fp, [ip, #12]
	pop {r10-r12, pc}
 8000768:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

0800076c <KeyGetkeyNoblock>:

#Returns the key that was pressed (does not wait until the button is not pressed)
#r0:output = what key was pressed
KeyGetkeyNoblock:
	push {r1-r3, r11-r12, lr}
 800076c:	e92d 580e 	stmdb	sp!, {r1, r2, r3, fp, ip, lr}
	bl KeyScanCol
 8000770:	f000 f8b2 	bl	80008d8 <KeyScanCol>

	#Wait for the button to stabalize and then read
	mov r1, #0xFA0 //1 ms
 8000774:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	bl delay
 8000778:	f000 f8ca 	bl	8000910 <delay>
	ldr r12, =GPIOC_BASE
 800077c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_IDR]
 8000780:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r2, r11, #0, #4
 8000784:	f3cb 0203 	ubfx	r2, fp, #0, #4

	bl KeyScanRow
 8000788:	f000 f8b4 	bl	80008f4 <KeyScanRow>
	
	#Wait for the button to stabalize and then read
	bl delay
 800078c:	f000 f8c0 	bl	8000910 <delay>
	ldr r12, =GPIOC_BASE
 8000790:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_IDR]
 8000794:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r3, r11, #4, #4
 8000798:	f3cb 1303 	ubfx	r3, fp, #4, #4

	bfi r2, r3, #4, #4
 800079c:	f363 1207 	bfi	r2, r3, #4, #4
	bl KeyGet
 80007a0:	f000 f841 	bl	8000826 <KeyGet>
	pop {r1-r3, r11-r12, pc}
 80007a4:	e8bd 980e 	ldmia.w	sp!, {r1, r2, r3, fp, ip, pc}

080007a8 <KeyGetkey>:

#Waits until the button is not pressed before returning
#r0:output = what key was pressed
KeyGetkey:
	push {r1-r3, r10-r12, lr}
 80007a8:	e92d 5c0e 	stmdb	sp!, {r1, r2, r3, sl, fp, ip, lr}
	bl KeyScanCol
 80007ac:	f000 f894 	bl	80008d8 <KeyScanCol>

	#Wait for the button to stabalize and then read
	mov r1, #0xFA0 //1 ms
 80007b0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	bl delay
 80007b4:	f000 f8ac 	bl	8000910 <delay>
	ldr r12, =GPIOC_BASE
 80007b8:	f8df c164 	ldr.w	ip, [pc, #356]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_IDR]
 80007bc:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r2, r11, #0, #4
 80007c0:	f3cb 0203 	ubfx	r2, fp, #0, #4
	eor r2, #0xFF
 80007c4:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
	ubfx r2, r2, #0, #4
 80007c8:	f3c2 0203 	ubfx	r2, r2, #0, #4

	bl KeyScanRow
 80007cc:	f000 f892 	bl	80008f4 <KeyScanRow>
	
	#Wait for the button to stabalize and then read
	bl delay
 80007d0:	f000 f89e 	bl	8000910 <delay>
	ldr r12, =GPIOC_BASE
 80007d4:	f8df c148 	ldr.w	ip, [pc, #328]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_IDR]
 80007d8:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r3, r11, #4, #4
 80007dc:	f3cb 1303 	ubfx	r3, fp, #4, #4
	eor r3, #0xFF
 80007e0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
	ubfx r3, r3, #0, #4
 80007e4:	f3c3 0303 	ubfx	r3, r3, #0, #4

1: //loop until the button is not pressed
	bl delay
 80007e8:	f000 f892 	bl	8000910 <delay>
	ldr r11, [r12, #GPIO_IDR]
 80007ec:	f8dc b010 	ldr.w	fp, [ip, #16]
	ubfx r10, r11, #4, #4
 80007f0:	f3cb 1a03 	ubfx	sl, fp, #4, #4
	cmp r10, #15
 80007f4:	f1ba 0f0f 	cmp.w	sl, #15
	bne 1b
 80007f8:	d1f6      	bne.n	80007e8 <KeyGetkey+0x40>

	bfi r2, r3, #4, #4
 80007fa:	f363 1207 	bfi	r2, r3, #4, #4
	bl KeyGet
 80007fe:	f000 f812 	bl	8000826 <KeyGet>
	pop {r1-r3, r10-r12, pc}
 8000802:	e8bd 9c0e 	ldmia.w	sp!, {r1, r2, r3, sl, fp, ip, pc}

08000806 <KeyGetchar>:

#Same as KeyGetKey, but converts the key value to ASCII
#r0:input/output = Comes in as a key value, exits as an ASCII value
KeyGetchar:
	push {r10, r12, lr}
 8000806:	e92d 5400 	stmdb	sp!, {sl, ip, lr}
	bl KeyGetkey
 800080a:	f7ff ffcd 	bl	80007a8 <KeyGetkey>

	ldr r12, =b01 //Load the memory location of the ASCII Map
 800080e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8000924 <delay+0x14>
	cmp r0, #0
 8000812:	2800      	cmp	r0, #0
	beq 1f
 8000814:	d005      	beq.n	8000822 <KeyGetchar+0x1c>
	sub r0, r0, #1
 8000816:	f1a0 0001 	sub.w	r0, r0, #1
	add r0, r0, r0
 800081a:	4400      	add	r0, r0
	ldrh r10, [r12, r0]
 800081c:	f83c a000 	ldrh.w	sl, [ip, r0]
	mov r0, r10
 8000820:	4650      	mov	r0, sl
1:
	pop {r10, r12, pc}
 8000822:	e8bd 9400 	ldmia.w	sp!, {sl, ip, pc}

08000826 <KeyGet>:

#Based on the row/col return the key
#r2:input = 7-4 rows, 3-0 columns
#r0:output = What button was pressed
KeyGet:
	push {r12, lr}
 8000826:	e92d 5000 	stmdb	sp!, {ip, lr}
	mov r0, #0
 800082a:	f04f 0000 	mov.w	r0, #0
	mov r12, r2
 800082e:	4694      	mov	ip, r2

	#1
	cmp r12, #0x11
 8000830:	f1bc 0f11 	cmp.w	ip, #17
	IT eq
 8000834:	bf08      	it	eq
	moveq r0, #1
 8000836:	2001      	moveq	r0, #1
	beq 1f
 8000838:	d04a      	beq.n	80008d0 <KeyGet+0xaa>
	
	#2
	cmp r12, #0x12
 800083a:	f1bc 0f12 	cmp.w	ip, #18
	IT eq
 800083e:	bf08      	it	eq
	moveq r0, #2
 8000840:	2002      	moveq	r0, #2
	beq 1f
 8000842:	d045      	beq.n	80008d0 <KeyGet+0xaa>

	#3
	cmp r12, #0x14
 8000844:	f1bc 0f14 	cmp.w	ip, #20
	IT eq
 8000848:	bf08      	it	eq
	moveq r0, #3
 800084a:	2003      	moveq	r0, #3
	beq 1f
 800084c:	d040      	beq.n	80008d0 <KeyGet+0xaa>

	#10 (A)
	cmp r12, #0x18
 800084e:	f1bc 0f18 	cmp.w	ip, #24
	IT eq
 8000852:	bf08      	it	eq
	moveq r0, #10
 8000854:	200a      	moveq	r0, #10
	beq 1f
 8000856:	d03b      	beq.n	80008d0 <KeyGet+0xaa>

	#4
	cmp r12, #0x21
 8000858:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
	IT eq
 800085c:	bf08      	it	eq
	moveq r0, #4
 800085e:	2004      	moveq	r0, #4
	beq 1f
 8000860:	d036      	beq.n	80008d0 <KeyGet+0xaa>
	
	#5
	cmp r12, #0x22
 8000862:	f1bc 0f22 	cmp.w	ip, #34	; 0x22
	IT eq
 8000866:	bf08      	it	eq
	moveq r0, #5
 8000868:	2005      	moveq	r0, #5
	beq 1f
 800086a:	d031      	beq.n	80008d0 <KeyGet+0xaa>

	#6
	cmp r12, #0x24
 800086c:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
	IT eq
 8000870:	bf08      	it	eq
	moveq r0, #6
 8000872:	2006      	moveq	r0, #6
	beq 1f
 8000874:	d02c      	beq.n	80008d0 <KeyGet+0xaa>

	#11 (B)
	cmp r12, #0x28
 8000876:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
	IT eq
 800087a:	bf08      	it	eq
	moveq r0, #11
 800087c:	200b      	moveq	r0, #11
	beq 1f
 800087e:	d027      	beq.n	80008d0 <KeyGet+0xaa>

	#7
	cmp r12, #0x41
 8000880:	f1bc 0f41 	cmp.w	ip, #65	; 0x41
	IT eq
 8000884:	bf08      	it	eq
	moveq r0, #7
 8000886:	2007      	moveq	r0, #7
	beq 1f
 8000888:	d022      	beq.n	80008d0 <KeyGet+0xaa>
	
	#8
	cmp r12, #0x42
 800088a:	f1bc 0f42 	cmp.w	ip, #66	; 0x42
	IT eq
 800088e:	bf08      	it	eq
	moveq r0, #8
 8000890:	2008      	moveq	r0, #8
	beq 1f
 8000892:	d01d      	beq.n	80008d0 <KeyGet+0xaa>

	#9
	cmp r12, #0x44
 8000894:	f1bc 0f44 	cmp.w	ip, #68	; 0x44
	IT eq
 8000898:	bf08      	it	eq
	moveq r0, #9
 800089a:	2009      	moveq	r0, #9
	beq 1f
 800089c:	d018      	beq.n	80008d0 <KeyGet+0xaa>

	#12 (C)
	cmp r12, #0x48
 800089e:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
	IT eq
 80008a2:	bf08      	it	eq
	moveq r0, #12
 80008a4:	200c      	moveq	r0, #12
	beq 1f
 80008a6:	d013      	beq.n	80008d0 <KeyGet+0xaa>

	#*
	cmp r12, #0x81
 80008a8:	f1bc 0f81 	cmp.w	ip, #129	; 0x81
	IT eq
 80008ac:	bf08      	it	eq
	moveq r0, #14
 80008ae:	200e      	moveq	r0, #14
	beq 1f
 80008b0:	d00e      	beq.n	80008d0 <KeyGet+0xaa>
	
	#0
	cmp r12, #0x82
 80008b2:	f1bc 0f82 	cmp.w	ip, #130	; 0x82
	beq 1f
 80008b6:	d00b      	beq.n	80008d0 <KeyGet+0xaa>

	##
	cmp r12, #0x84
 80008b8:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
	IT eq
 80008bc:	bf08      	it	eq
	moveq r0, #15
 80008be:	200f      	moveq	r0, #15
	beq 1f
 80008c0:	d006      	beq.n	80008d0 <KeyGet+0xaa>

	#13 (D)
	cmp r12, #0x88
 80008c2:	f1bc 0f88 	cmp.w	ip, #136	; 0x88
	IT eq
 80008c6:	bf08      	it	eq
	moveq r0, #13
 80008c8:	200d      	moveq	r0, #13
	beq 1f
 80008ca:	d001      	beq.n	80008d0 <KeyGet+0xaa>

	#No button was pressed
	pop {r12, pc}
 80008cc:	e8bd 9000 	ldmia.w	sp!, {ip, pc}
1:
	add r0, r0, #1
 80008d0:	f100 0001 	add.w	r0, r0, #1
	pop {r12, pc}
 80008d4:	e8bd 9000 	ldmia.w	sp!, {ip, pc}

080008d8 <KeyScanCol>:


#Turn Rows to outputs, Columns to inputs
KeyScanCol:
	push {r10-r12, lr}
 80008d8:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
	ldr r12, =GPIOC_BASE
 80008dc:	f8df c040 	ldr.w	ip, [pc, #64]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_MODER]
 80008e0:	f8dc b000 	ldr.w	fp, [ip]
	mov r10, #0xAA00
 80008e4:	f44f 4a2a 	mov.w	sl, #43520	; 0xaa00
	bfi r11, r10, #0, #16
 80008e8:	f36a 0b0f 	bfi	fp, sl, #0, #16
	str r11, [r12, #GPIO_MODER]
 80008ec:	f8cc b000 	str.w	fp, [ip]
	pop {r10-r12, pc}
 80008f0:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

080008f4 <KeyScanRow>:

#Turn Columns to outputs, Rows to inputs
KeyScanRow:
	push {r10-r12, lr}
 80008f4:	e92d 5c00 	stmdb	sp!, {sl, fp, ip, lr}
	ldr r12, =GPIOC_BASE
 80008f8:	f8df c024 	ldr.w	ip, [pc, #36]	; 8000920 <delay+0x10>
	ldr r11, [r12, #GPIO_MODER]
 80008fc:	f8dc b000 	ldr.w	fp, [ip]
	mov r10, #0x0055
 8000900:	f04f 0a55 	mov.w	sl, #85	; 0x55
	bfi r11, r10, #0, #16
 8000904:	f36a 0b0f 	bfi	fp, sl, #0, #16
	str r11, [r12, #GPIO_MODER]	
 8000908:	f8cc b000 	str.w	fp, [ip]
	pop {r10-r12, pc}
 800090c:	e8bd 9c00 	ldmia.w	sp!, {sl, fp, ip, pc}

08000910 <delay>:


delay:
	push {r1, lr}
 8000910:	b502      	push	{r1, lr}
	mov r1, r0
 8000912:	4601      	mov	r1, r0
1:
	subs r1, r1, #1
 8000914:	3901      	subs	r1, #1
	beq 1b
 8000916:	d0fd      	beq.n	8000914 <delay+0x4>
	pop {r1, pc}
 8000918:	bd02      	pop	{r1, pc}
 800091a:	0000      	.short	0x0000
    ldr r12, =RCC_BASE
 800091c:	40023800 	.word	0x40023800
	ldr r12, =GPIOC_BASE
 8000920:	40020800 	.word	0x40020800
	ldr r12, =b01 //Load the memory location of the ASCII Map
 8000924:	20000049 	.word	0x20000049

08000928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000952:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000956:	f000 f811 	bl	800097c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fe0d 	bl	8000578 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800096c:	080009e4 	.word	0x080009e4
  ldr r2, =_sbss
 8000970:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000974:	20000088 	.word	0x20000088

08000978 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <__libc_init_array>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	4e0d      	ldr	r6, [pc, #52]	; (80009b4 <__libc_init_array+0x38>)
 8000980:	4c0d      	ldr	r4, [pc, #52]	; (80009b8 <__libc_init_array+0x3c>)
 8000982:	1ba4      	subs	r4, r4, r6
 8000984:	10a4      	asrs	r4, r4, #2
 8000986:	2500      	movs	r5, #0
 8000988:	42a5      	cmp	r5, r4
 800098a:	d109      	bne.n	80009a0 <__libc_init_array+0x24>
 800098c:	4e0b      	ldr	r6, [pc, #44]	; (80009bc <__libc_init_array+0x40>)
 800098e:	4c0c      	ldr	r4, [pc, #48]	; (80009c0 <__libc_init_array+0x44>)
 8000990:	f000 f818 	bl	80009c4 <_init>
 8000994:	1ba4      	subs	r4, r4, r6
 8000996:	10a4      	asrs	r4, r4, #2
 8000998:	2500      	movs	r5, #0
 800099a:	42a5      	cmp	r5, r4
 800099c:	d105      	bne.n	80009aa <__libc_init_array+0x2e>
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a4:	4798      	blx	r3
 80009a6:	3501      	adds	r5, #1
 80009a8:	e7ee      	b.n	8000988 <__libc_init_array+0xc>
 80009aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ae:	4798      	blx	r3
 80009b0:	3501      	adds	r5, #1
 80009b2:	e7f2      	b.n	800099a <__libc_init_array+0x1e>
 80009b4:	080009dc 	.word	0x080009dc
 80009b8:	080009dc 	.word	0x080009dc
 80009bc:	080009dc 	.word	0x080009dc
 80009c0:	080009e0 	.word	0x080009e0

080009c4 <_init>:
 80009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c6:	bf00      	nop
 80009c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ca:	bc08      	pop	{r3}
 80009cc:	469e      	mov	lr, r3
 80009ce:	4770      	bx	lr

080009d0 <_fini>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr
